# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProcessActivityApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_component_to_resource_def(self, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """add_component_to_resource_def  # noqa: E501

        Add a component on a resource type on the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_component_to_resource_def(id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`.  (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the component will be added to. (required)
        :param AddComponentToResourceType body: A JSON object containing the options for adding the component.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_component_to_resource_def_with_http_info(id, activity_id, resource_def_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_component_to_resource_def_with_http_info(id, activity_id, resource_def_id, **kwargs)  # noqa: E501
            return data

    def add_component_to_resource_def_with_http_info(self, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """add_component_to_resource_def  # noqa: E501

        Add a component on a resource type on the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_component_to_resource_def_with_http_info(id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`.  (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the component will be added to. (required)
        :param AddComponentToResourceType body: A JSON object containing the options for adding the component.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'resource_def_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_component_to_resource_def" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_component_to_resource_def`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `add_component_to_resource_def`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `add_component_to_resource_def`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}/resource-type/{resourceDefId}/component', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_property_type_to_activity(self, body, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """add_property_type_to_activity  # noqa: E501

        Add a property type to a resource type on the `input` or `output` of an activity on a process. Property type will be created with default unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_property_type_to_activity(body, id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddPropertyTypeBody body: A JSON object containing the options for adding the property type. (required)
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the the resource type the property type is being added to. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_property_type_to_activity_with_http_info(body, id, activity_id, resource_def_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_property_type_to_activity_with_http_info(body, id, activity_id, resource_def_id, **kwargs)  # noqa: E501
            return data

    def add_property_type_to_activity_with_http_info(self, body, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """add_property_type_to_activity  # noqa: E501

        Add a property type to a resource type on the `input` or `output` of an activity on a process. Property type will be created with default unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_property_type_to_activity_with_http_info(body, id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddPropertyTypeBody body: A JSON object containing the options for adding the property type. (required)
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the the resource type the property type is being added to. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id', 'resource_def_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_property_type_to_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_property_type_to_activity`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_property_type_to_activity`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `add_property_type_to_activity`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `add_property_type_to_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}/resource-type/{resourceDefId}/property-type', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_resource_type_to_activity(self, body, id, activity_id, **kwargs):  # noqa: E501
        """add_resource_type_to_activity  # noqa: E501

        Add a resource type to the `input` or `output` of an activity on a process. Default components and property types for that resource type will be included.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_resource_type_to_activity(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddResourceTypeBody body: A JSON object containing the options for creating the resource type. (required)
        :param str id: The `_id` of process the resource type is being added to. (required)
        :param str activity_id: The `_id` of activity the resource type is being added to. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_resource_type_to_activity_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_resource_type_to_activity_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
            return data

    def add_resource_type_to_activity_with_http_info(self, body, id, activity_id, **kwargs):  # noqa: E501
        """add_resource_type_to_activity  # noqa: E501

        Add a resource type to the `input` or `output` of an activity on a process. Default components and property types for that resource type will be included.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_resource_type_to_activity_with_http_info(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddResourceTypeBody body: A JSON object containing the options for creating the resource type. (required)
        :param str id: The `_id` of process the resource type is being added to. (required)
        :param str activity_id: The `_id` of activity the resource type is being added to. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_resource_type_to_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_resource_type_to_activity`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_resource_type_to_activity`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `add_resource_type_to_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}/resource-type', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_activity(self, body, id, **kwargs):  # noqa: E501
        """create_activity  # noqa: E501

        Create a new activity (step) on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_activity(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityBody body: A JSON object containing the necessary properties to create a new activity. (required)
        :param str id: The `_id` of process. (required)
        :return: Activity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_activity_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_activity_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def create_activity_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """create_activity  # noqa: E501

        Create a new activity (step) on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_activity_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityBody body: A JSON object containing the necessary properties to create a new activity. (required)
        :param str id: The `_id` of process. (required)
        :return: Activity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_activity`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Activity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_activity(self, id, activity_id, **kwargs):  # noqa: E501
        """delete_activity  # noqa: E501

        Deletes the specified activity (step) from a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_activity(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_activity_with_http_info(id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_activity_with_http_info(id, activity_id, **kwargs)  # noqa: E501
            return data

    def delete_activity_with_http_info(self, id, activity_id, **kwargs):  # noqa: E501
        """delete_activity  # noqa: E501

        Deletes the specified activity (step) from a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_activity_with_http_info(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_activity`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `delete_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_component_from_resource_def(self, id, activity_id, resource_def_id, component_id, **kwargs):  # noqa: E501
        """delete_component_from_resource_def  # noqa: E501

        Removal of a component from a resource type on the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_component_from_resource_def(id, activity_id, resource_def_id, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`.  (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the component will be removed from. (required)
        :param str component_id: The `_id` of the resource type of the component being removed. (required)
        :param bool propagate: Propagates the removal of the component to connected instances of the resource type on the activity. Defaults to true if not set to false.
        :param str propagation_direction: Direction of propagation. Will be one of `upstream` or `downstream`. Defaults to `downstream` if not set. Not required if `propagate` is not defined.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_component_from_resource_def_with_http_info(id, activity_id, resource_def_id, component_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_component_from_resource_def_with_http_info(id, activity_id, resource_def_id, component_id, **kwargs)  # noqa: E501
            return data

    def delete_component_from_resource_def_with_http_info(self, id, activity_id, resource_def_id, component_id, **kwargs):  # noqa: E501
        """delete_component_from_resource_def  # noqa: E501

        Removal of a component from a resource type on the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_component_from_resource_def_with_http_info(id, activity_id, resource_def_id, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`.  (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the component will be removed from. (required)
        :param str component_id: The `_id` of the resource type of the component being removed. (required)
        :param bool propagate: Propagates the removal of the component to connected instances of the resource type on the activity. Defaults to true if not set to false.
        :param str propagation_direction: Direction of propagation. Will be one of `upstream` or `downstream`. Defaults to `downstream` if not set. Not required if `propagate` is not defined.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'resource_def_id', 'component_id', 'propagate', 'propagation_direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_component_from_resource_def" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_component_from_resource_def`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `delete_component_from_resource_def`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `delete_component_from_resource_def`")  # noqa: E501
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params or
                params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `delete_component_from_resource_def`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501

        query_params = []
        if 'propagate' in params:
            query_params.append(('propagate', params['propagate']))  # noqa: E501
        if 'propagation_direction' in params:
            query_params.append(('propagationDirection', params['propagation_direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}/resource-type/{resourceDefId}/component/{componentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_property_type_from_activity(self, body, id, activity_id, resource_def_id, property_type_id, **kwargs):  # noqa: E501
        """delete_property_type_from_activity  # noqa: E501

        Removal of a property type from a resource type on the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_property_type_from_activity(body, id, activity_id, resource_def_id, property_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: A JSON object containing the options for removing the property type. (required)
        :param str id: The `_id` of the process. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the property type will be updated on. (required)
        :param str property_type_id: The `_id` of the property type. (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_property_type_from_activity_with_http_info(body, id, activity_id, resource_def_id, property_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_property_type_from_activity_with_http_info(body, id, activity_id, resource_def_id, property_type_id, **kwargs)  # noqa: E501
            return data

    def delete_property_type_from_activity_with_http_info(self, body, id, activity_id, resource_def_id, property_type_id, **kwargs):  # noqa: E501
        """delete_property_type_from_activity  # noqa: E501

        Removal of a property type from a resource type on the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_property_type_from_activity_with_http_info(body, id, activity_id, resource_def_id, property_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: A JSON object containing the options for removing the property type. (required)
        :param str id: The `_id` of the process. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the property type will be updated on. (required)
        :param str property_type_id: The `_id` of the property type. (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id', 'resource_def_id', 'property_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_property_type_from_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_property_type_from_activity`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_property_type_from_activity`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `delete_property_type_from_activity`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `delete_property_type_from_activity`")  # noqa: E501
        # verify the required parameter 'property_type_id' is set
        if ('property_type_id' not in params or
                params['property_type_id'] is None):
            raise ValueError("Missing the required parameter `property_type_id` when calling `delete_property_type_from_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501
        if 'property_type_id' in params:
            path_params['propertyTypeId'] = params['property_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}/resource-type/{resourceDefId}/property-type/{propertyTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_resource_type_from_activity(self, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """delete_resource_type_from_activity  # noqa: E501

        Deletes a resource type from the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resource_type_from_activity(id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process the resource type is being deleted from. (required)
        :param str activity_id: The `_id` of activity the resource type is being deleted from. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type being deleted. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_resource_type_from_activity_with_http_info(id, activity_id, resource_def_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_resource_type_from_activity_with_http_info(id, activity_id, resource_def_id, **kwargs)  # noqa: E501
            return data

    def delete_resource_type_from_activity_with_http_info(self, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """delete_resource_type_from_activity  # noqa: E501

        Deletes a resource type from the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resource_type_from_activity_with_http_info(id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process the resource type is being deleted from. (required)
        :param str activity_id: The `_id` of activity the resource type is being deleted from. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type being deleted. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'resource_def_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_resource_type_from_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_resource_type_from_activity`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `delete_resource_type_from_activity`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `delete_resource_type_from_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}/resource-type/{resourceDefId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_activity(self, id, activity_id, **kwargs):  # noqa: E501
        """get_activity  # noqa: E501

        Returns the details for the specified activity (step) on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activity(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :return: Activity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_activity_with_http_info(id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_activity_with_http_info(id, activity_id, **kwargs)  # noqa: E501
            return data

    def get_activity_with_http_info(self, id, activity_id, **kwargs):  # noqa: E501
        """get_activity  # noqa: E501

        Returns the details for the specified activity (step) on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activity_with_http_info(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :return: Activity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_activity`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `get_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Activity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_activity_version(self, id, activity_id, version_label, **kwargs):  # noqa: E501
        """get_activity_version  # noqa: E501

        Returns design details on the specified activity and its version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activity_version(id, activity_id, version_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :param str version_label: The `version.label` of the activity. Should be in the format of `0.01` or `1.00`. (required)
        :return: Activity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_activity_version_with_http_info(id, activity_id, version_label, **kwargs)  # noqa: E501
        else:
            (data) = self.get_activity_version_with_http_info(id, activity_id, version_label, **kwargs)  # noqa: E501
            return data

    def get_activity_version_with_http_info(self, id, activity_id, version_label, **kwargs):  # noqa: E501
        """get_activity_version  # noqa: E501

        Returns design details on the specified activity and its version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activity_version_with_http_info(id, activity_id, version_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :param str version_label: The `version.label` of the activity. Should be in the format of `0.01` or `1.00`. (required)
        :return: Activity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'version_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activity_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_activity_version`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `get_activity_version`")  # noqa: E501
        # verify the required parameter 'version_label' is set
        if ('version_label' not in params or
                params['version_label'] is None):
            raise ValueError("Missing the required parameter `version_label` when calling `get_activity_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'version_label' in params:
            path_params['versionLabel'] = params['version_label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}/version/{versionLabel}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Activity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_activities(self, id, **kwargs):  # noqa: E501
        """list_activities  # noqa: E501

        List or search the activities (steps) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_activities(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash(`-`). A comma separated list may be used to sort by more than one field (e.g. `name,-label`). 
        :param str version: Limits the result set to the specified version label
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param bool public: Toggles the result set between public and private data. Default value is `false`
        :return: Activities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_activities_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_activities_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_activities_with_http_info(self, id, **kwargs):  # noqa: E501
        """list_activities  # noqa: E501

        List or search the activities (steps) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_activities_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash(`-`). A comma separated list may be used to sort by more than one field (e.g. `name,-label`). 
        :param str version: Limits the result set to the specified version label
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param bool public: Toggles the result set between public and private data. Default value is `false`
        :return: Activities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort', 'version', 'limit', 'offset', 'before', 'after', 'fields', 'name', 'creator', 'public']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_activities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501
        if 'public' in params:
            query_params.append(('public', params['public']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Activities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_activity_versions(self, id, activity_id, **kwargs):  # noqa: E501
        """list_activity_versions  # noqa: E501

        Returns design details on all versions of specified activity associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_activity_versions(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :return: Activities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_activity_versions_with_http_info(id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_activity_versions_with_http_info(id, activity_id, **kwargs)  # noqa: E501
            return data

    def list_activity_versions_with_http_info(self, id, activity_id, **kwargs):  # noqa: E501
        """list_activity_versions  # noqa: E501

        Returns design details on all versions of specified activity associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_activity_versions_with_http_info(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :return: Activities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_activity_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_activity_versions`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `list_activity_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Activities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_activity(self, body, id, activity_id, **kwargs):  # noqa: E501
        """update_activity  # noqa: E501

        Updates the detail for the specified activity (step) on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_activity(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateActivityBody body: A JSON object containing the necessary properties to update an activity. (required)
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :return: Activity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_activity_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_activity_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
            return data

    def update_activity_with_http_info(self, body, id, activity_id, **kwargs):  # noqa: E501
        """update_activity  # noqa: E501

        Updates the detail for the specified activity (step) on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_activity_with_http_info(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateActivityBody body: A JSON object containing the necessary properties to update an activity. (required)
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. (required)
        :return: Activity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_activity`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_activity`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `update_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Activity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_component_on_resource_def(self, id, activity_id, resource_def_id, component_id, **kwargs):  # noqa: E501
        """update_component_on_resource_def  # noqa: E501

        Update a component on a resource type on the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_component_on_resource_def(id, activity_id, resource_def_id, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`.  (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the component will be updated on. (required)
        :param str component_id: The `_id` of the resource type being used as a component. (required)
        :param UpdateComponentOnResType body: A JSON object containing the options for adding the component.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_component_on_resource_def_with_http_info(id, activity_id, resource_def_id, component_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_component_on_resource_def_with_http_info(id, activity_id, resource_def_id, component_id, **kwargs)  # noqa: E501
            return data

    def update_component_on_resource_def_with_http_info(self, id, activity_id, resource_def_id, component_id, **kwargs):  # noqa: E501
        """update_component_on_resource_def  # noqa: E501

        Update a component on a resource type on the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_component_on_resource_def_with_http_info(id, activity_id, resource_def_id, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`.  (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the component will be updated on. (required)
        :param str component_id: The `_id` of the resource type being used as a component. (required)
        :param UpdateComponentOnResType body: A JSON object containing the options for adding the component.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'resource_def_id', 'component_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_component_on_resource_def" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_component_on_resource_def`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `update_component_on_resource_def`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `update_component_on_resource_def`")  # noqa: E501
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params or
                params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `update_component_on_resource_def`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}/resource-type/{resourceDefId}/component/{componentId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_property_type_on_activity(self, id, activity_id, resource_def_id, property_type_id, **kwargs):  # noqa: E501
        """update_property_type_on_activity  # noqa: E501

        Update a property type on a resource type on the `input` or `output` of an activity on a process. Allows for setting a different unit than the default unit for the property.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_property_type_on_activity(id, activity_id, resource_def_id, property_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the property type will be updated on. (required)
        :param str property_type_id: The `_id` of the property type. (required)
        :param Body7 body: A JSON object containing the options for removing the property type.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_property_type_on_activity_with_http_info(id, activity_id, resource_def_id, property_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_property_type_on_activity_with_http_info(id, activity_id, resource_def_id, property_type_id, **kwargs)  # noqa: E501
            return data

    def update_property_type_on_activity_with_http_info(self, id, activity_id, resource_def_id, property_type_id, **kwargs):  # noqa: E501
        """update_property_type_on_activity  # noqa: E501

        Update a property type on a resource type on the `input` or `output` of an activity on a process. Allows for setting a different unit than the default unit for the property.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_property_type_on_activity_with_http_info(id, activity_id, resource_def_id, property_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the property type will be updated on. (required)
        :param str property_type_id: The `_id` of the property type. (required)
        :param Body7 body: A JSON object containing the options for removing the property type.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'resource_def_id', 'property_type_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_property_type_on_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_property_type_on_activity`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `update_property_type_on_activity`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `update_property_type_on_activity`")  # noqa: E501
        # verify the required parameter 'property_type_id' is set
        if ('property_type_id' not in params or
                params['property_type_id'] is None):
            raise ValueError("Missing the required parameter `property_type_id` when calling `update_property_type_on_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501
        if 'property_type_id' in params:
            path_params['propertyTypeId'] = params['property_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}/resource-type/{resourceDefId}/property-type/{propertyTypeId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_resource_type_on_activity(self, body, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """update_resource_type_on_activity  # noqa: E501

        Change a resource type on the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resource_type_on_activity(body, id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body6 body: A JSON object containing the options for updating the resource type. (required)
        :param str id: The `_id` of process the resource type is being updated on. (required)
        :param str activity_id: The `_id` of activity the resource type is being updated on. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type being updated. (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_resource_type_on_activity_with_http_info(body, id, activity_id, resource_def_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_resource_type_on_activity_with_http_info(body, id, activity_id, resource_def_id, **kwargs)  # noqa: E501
            return data

    def update_resource_type_on_activity_with_http_info(self, body, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """update_resource_type_on_activity  # noqa: E501

        Change a resource type on the `input` or `output` of an activity on a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resource_type_on_activity_with_http_info(body, id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body6 body: A JSON object containing the options for updating the resource type. (required)
        :param str id: The `_id` of process the resource type is being updated on. (required)
        :param str activity_id: The `_id` of activity the resource type is being updated on. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type being updated. (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id', 'resource_def_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_resource_type_on_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_resource_type_on_activity`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_resource_type_on_activity`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `update_resource_type_on_activity`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `update_resource_type_on_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/activity/{activityId}/resource-type/{resourceDefId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

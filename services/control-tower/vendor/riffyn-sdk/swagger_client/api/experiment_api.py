# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ExperimentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_comment_to_experiment(self, body, id, **kwargs):  # noqa: E501
        """add_comment_to_experiment  # noqa: E501

        Adds a comment (or observation) to an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_comment_to_experiment(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentBody body: A JSON object containing the options for creating the comment. (required)
        :param str id: The `_id` of the experiment you would like to add the comment to. (required)
        :return: CommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_comment_to_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_comment_to_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def add_comment_to_experiment_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """add_comment_to_experiment  # noqa: E501

        Adds a comment (or observation) to an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_comment_to_experiment_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentBody body: A JSON object containing the options for creating the comment. (required)
        :param str id: The `_id` of the experiment you would like to add the comment to. (required)
        :return: CommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_comment_to_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_comment_to_experiment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_comment_to_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/comment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_component_to_resource_type(self, body, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """add_component_to_resource_type  # noqa: E501

        Ad hoc addition of a component to a resource type on the `input` or `output` of an activity on an experiment. Only ad hoc added components can be deleted from the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_component_to_resource_type(body, id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body3 body: A JSON object containing the options for adding the component. (required)
        :param str id: The `_id` of the experiment the component is being added to. (required)
        :param str activity_id: The `_id` of the activity the component is being added to. Refers to the Process Activity `_id` from the `listActivities` endpoint. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the component being added. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_component_to_resource_type_with_http_info(body, id, activity_id, resource_def_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_component_to_resource_type_with_http_info(body, id, activity_id, resource_def_id, **kwargs)  # noqa: E501
            return data

    def add_component_to_resource_type_with_http_info(self, body, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """add_component_to_resource_type  # noqa: E501

        Ad hoc addition of a component to a resource type on the `input` or `output` of an activity on an experiment. Only ad hoc added components can be deleted from the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_component_to_resource_type_with_http_info(body, id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body3 body: A JSON object containing the options for adding the component. (required)
        :param str id: The `_id` of the experiment the component is being added to. (required)
        :param str activity_id: The `_id` of the activity the component is being added to. Refers to the Process Activity `_id` from the `listActivities` endpoint. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the component being added. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id', 'resource_def_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_component_to_resource_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_component_to_resource_type`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_component_to_resource_type`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `add_component_to_resource_type`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `add_component_to_resource_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/resource-type/{resourceDefId}/component', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_property_type_to_experiment(self, body, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """add_property_type_to_experiment  # noqa: E501

        Ad hoc addition of a property type to a resource type on the `input` or `output` of an activity of a experiment. Only ad hoc added property types can be deleted from the experiment. Will be created with default unit for the property type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_property_type_to_experiment(body, id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body4 body: A JSON object containing the options for adding the property type. (required)
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the property type will be added to. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_property_type_to_experiment_with_http_info(body, id, activity_id, resource_def_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_property_type_to_experiment_with_http_info(body, id, activity_id, resource_def_id, **kwargs)  # noqa: E501
            return data

    def add_property_type_to_experiment_with_http_info(self, body, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """add_property_type_to_experiment  # noqa: E501

        Ad hoc addition of a property type to a resource type on the `input` or `output` of an activity of a experiment. Only ad hoc added property types can be deleted from the experiment. Will be created with default unit for the property type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_property_type_to_experiment_with_http_info(body, id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body4 body: A JSON object containing the options for adding the property type. (required)
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the property type will be added to. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id', 'resource_def_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_property_type_to_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_property_type_to_experiment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_property_type_to_experiment`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `add_property_type_to_experiment`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `add_property_type_to_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/resource-type/{resourceDefId}/property-type', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_resource_type_to_experiment(self, body, id, activity_id, **kwargs):  # noqa: E501
        """add_resource_type_to_experiment  # noqa: E501

        Ad hoc addition of a resource type to the `input` or `output` of an activity on an experiment. Default components and properties of the resource type will be included. Only ad hoc resource types can be deleted from the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_resource_type_to_experiment(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddResourceDefBody body: A JSON object containing the options for adding the resource type. (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of the activity the resource type is being added to. Refers to the Process Activity `_id` from the `listActivities` endpoint. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_resource_type_to_experiment_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_resource_type_to_experiment_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
            return data

    def add_resource_type_to_experiment_with_http_info(self, body, id, activity_id, **kwargs):  # noqa: E501
        """add_resource_type_to_experiment  # noqa: E501

        Ad hoc addition of a resource type to the `input` or `output` of an activity on an experiment. Default components and properties of the resource type will be included. Only ad hoc resource types can be deleted from the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_resource_type_to_experiment_with_http_info(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddResourceDefBody body: A JSON object containing the options for adding the resource type. (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of the activity the resource type is being added to. Refers to the Process Activity `_id` from the `listActivities` endpoint. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_resource_type_to_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_resource_type_to_experiment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_resource_type_to_experiment`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `add_resource_type_to_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/resource-type', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_summary_to_experiment(self, body, id, **kwargs):  # noqa: E501
        """add_summary_to_experiment  # noqa: E501

        Adds a summary and a purpose for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_summary_to_experiment(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SummaryBody body: A JSON object containing the options for creating the summary. (required)
        :param str id: The `_id` of the experiment you would like to add the summary to. (required)
        :return: SummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_summary_to_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_summary_to_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def add_summary_to_experiment_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """add_summary_to_experiment  # noqa: E501

        Adds a summary and a purpose for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_summary_to_experiment_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SummaryBody body: A JSON object containing the options for creating the summary. (required)
        :param str id: The `_id` of the experiment you would like to add the summary to. (required)
        :return: SummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_summary_to_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_summary_to_experiment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_summary_to_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SummaryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_tag_to_experiment(self, body, id, **kwargs):  # noqa: E501
        """add_tag_to_experiment  # noqa: E501

        Adds a tag to an experiment. If the tag doesn't exist, it will create it and add it to the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tag_to_experiment(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body body: A JSON object containing the options for creating the tag. (required)
        :param str id: The `_id` of the experiment you would like to add the tag to. (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_tag_to_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_tag_to_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def add_tag_to_experiment_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """add_tag_to_experiment  # noqa: E501

        Adds a tag to an experiment. If the tag doesn't exist, it will create it and add it to the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tag_to_experiment_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body body: A JSON object containing the options for creating the tag. (required)
        :param str id: The `_id` of the experiment you would like to add the tag to. (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tag_to_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_tag_to_experiment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_tag_to_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apply_upload_config(self, body, id, activity_id, **kwargs):  # noqa: E501
        """apply_upload_config  # noqa: E501

        Apply an upload configuration (or parseConfig) to an uploaded dataFile to add data to an activity. Manual data is required if it exists for the upload configuration. Excess manual data is ignored.  To find upload configurations: `/process/:id/upload-configs`.  Retrieve `_id` returned when uploading dataFile:  `/experiment/:id/activity/:activityId/upload`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_upload_config(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplyConfigBody body: A JSON object containing the ids required for applying the configuration. (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :return: ApplyConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_upload_config_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_upload_config_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
            return data

    def apply_upload_config_with_http_info(self, body, id, activity_id, **kwargs):  # noqa: E501
        """apply_upload_config  # noqa: E501

        Apply an upload configuration (or parseConfig) to an uploaded dataFile to add data to an activity. Manual data is required if it exists for the upload configuration. Excess manual data is ignored.  To find upload configurations: `/process/:id/upload-configs`.  Retrieve `_id` returned when uploading dataFile:  `/experiment/:id/activity/:activityId/upload`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_upload_config_with_http_info(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplyConfigBody body: A JSON object containing the ids required for applying the configuration. (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :return: ApplyConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_upload_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `apply_upload_config`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apply_upload_config`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `apply_upload_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/apply-config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplyConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apply_upload_config_collection(self, body, id, **kwargs):  # noqa: E501
        """apply_upload_config_collection  # noqa: E501

        Apply an upload configuration (or parseConfig) to an uploaded dataFile to add data to an experiment. A collection will apply all the upload configuration it contains. A collection may contain configurations for more than one activity. Manual data is required for each configuration where it exists. Excess manual data is ignored.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_upload_config_collection(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplyConfigCollectionBody body: A JSON object containing the ids required for applying the configuration collection. (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :return: ApplyConfigCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_upload_config_collection_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_upload_config_collection_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def apply_upload_config_collection_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """apply_upload_config_collection  # noqa: E501

        Apply an upload configuration (or parseConfig) to an uploaded dataFile to add data to an experiment. A collection will apply all the upload configuration it contains. A collection may contain configurations for more than one activity. Manual data is required for each configuration where it exists. Excess manual data is ignored.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_upload_config_collection_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplyConfigCollectionBody body: A JSON object containing the ids required for applying the configuration collection. (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :return: ApplyConfigCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_upload_config_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `apply_upload_config_collection`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apply_upload_config_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/apply-config-collection', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplyConfigCollectionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clone_experiment(self, body, id, **kwargs):  # noqa: E501
        """clone_experiment  # noqa: E501

        Creates a new experiment, using an existing experiment as a template. Any run groups or runs that are associated. with the source experiment `_id` will also be cloned. Run data will not be cloned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_experiment(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body1 body: A JSON object containing the options for creating the clone. (required)
        :param str id: The `_id` of the experiment you would like to clone. (required)
        :return: Experiment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clone_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.clone_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def clone_experiment_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """clone_experiment  # noqa: E501

        Creates a new experiment, using an existing experiment as a template. Any run groups or runs that are associated. with the source experiment `_id` will also be cloned. Run data will not be cloned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_experiment_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body1 body: A JSON object containing the options for creating the clone. (required)
        :param str id: The `_id` of the experiment you would like to clone. (required)
        :return: Experiment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `clone_experiment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clone_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Experiment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_experiment(self, body, **kwargs):  # noqa: E501
        """create_experiment  # noqa: E501

        Creates a new experiment for a process. Not specifying a `version` value will create the new experiment from the current (working) version of the specified process.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_experiment(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewExperimentBody body: A JSON object containing the necessary properties to create a new experiment. (required)
        :return: Experiment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_experiment_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_experiment_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_experiment_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_experiment  # noqa: E501

        Creates a new experiment for a process. Not specifying a `version` value will create the new experiment from the current (working) version of the specified process.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_experiment_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewExperimentBody body: A JSON object containing the necessary properties to create a new experiment. (required)
        :return: Experiment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Experiment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_component_from_resource_type(self, id, activity_id, resource_def_id, component_id, **kwargs):  # noqa: E501
        """delete_component_from_resource_type  # noqa: E501

        Ad hoc removal of a component on a resource type from the `input` or `output` of an activity on an experiment. Only ad hoc added components can be deleted from the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_component_from_resource_type(id, activity_id, resource_def_id, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment the resource type. (required)
        :param str activity_id: The `_id` of the activity the resource type. Refers to the Process Activity `_id` from the `listActivities` endpoint. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the the resource type. (required)
        :param str component_id: The resource type `_id` of the component being removed from a resource type on the `input` or `output` on the activity. (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_component_from_resource_type_with_http_info(id, activity_id, resource_def_id, component_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_component_from_resource_type_with_http_info(id, activity_id, resource_def_id, component_id, **kwargs)  # noqa: E501
            return data

    def delete_component_from_resource_type_with_http_info(self, id, activity_id, resource_def_id, component_id, **kwargs):  # noqa: E501
        """delete_component_from_resource_type  # noqa: E501

        Ad hoc removal of a component on a resource type from the `input` or `output` of an activity on an experiment. Only ad hoc added components can be deleted from the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_component_from_resource_type_with_http_info(id, activity_id, resource_def_id, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment the resource type. (required)
        :param str activity_id: The `_id` of the activity the resource type. Refers to the Process Activity `_id` from the `listActivities` endpoint. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the the resource type. (required)
        :param str component_id: The resource type `_id` of the component being removed from a resource type on the `input` or `output` on the activity. (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'resource_def_id', 'component_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_component_from_resource_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_component_from_resource_type`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `delete_component_from_resource_type`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `delete_component_from_resource_type`")  # noqa: E501
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params or
                params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `delete_component_from_resource_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/resource-type/{resourceDefId}/component/{componentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_experiment(self, id, **kwargs):  # noqa: E501
        """delete_experiment  # noqa: E501

        Performs a 'soft delete' on an existing experiment. The experiment will still be accessible through the api when searching by `_id` on `getExperiment` endpoint or with the query parameter `deleted` on `listExperiments` endpoint. A deleted experiment will be marked as purged and remain in the database for 7 days. The experiment will then be permanently deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_experiment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :return: SuccessfullyDelete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_experiment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_experiment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_experiment_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_experiment  # noqa: E501

        Performs a 'soft delete' on an existing experiment. The experiment will still be accessible through the api when searching by `_id` on `getExperiment` endpoint or with the query parameter `deleted` on `listExperiments` endpoint. A deleted experiment will be marked as purged and remain in the database for 7 days. The experiment will then be permanently deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_experiment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :return: SuccessfullyDelete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessfullyDelete',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_experiment_comment(self, id, comment_id, **kwargs):  # noqa: E501
        """delete_experiment_comment  # noqa: E501

        Deletes the specific comment (or observation) associated with an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_experiment_comment(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: CommentDeleted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_experiment_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_experiment_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
            return data

    def delete_experiment_comment_with_http_info(self, id, comment_id, **kwargs):  # noqa: E501
        """delete_experiment_comment  # noqa: E501

        Deletes the specific comment (or observation) associated with an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_experiment_comment_with_http_info(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: CommentDeleted
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_experiment_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_experiment_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `delete_experiment_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/comment/{commentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentDeleted',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_experiment_summary(self, id, summary_id, **kwargs):  # noqa: E501
        """delete_experiment_summary  # noqa: E501

        Deletes the summary and purpose for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_experiment_summary(id, summary_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str summary_id: The `_id` of the summary to be removed. (required)
        :return: SummaryDeleted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_experiment_summary_with_http_info(id, summary_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_experiment_summary_with_http_info(id, summary_id, **kwargs)  # noqa: E501
            return data

    def delete_experiment_summary_with_http_info(self, id, summary_id, **kwargs):  # noqa: E501
        """delete_experiment_summary  # noqa: E501

        Deletes the summary and purpose for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_experiment_summary_with_http_info(id, summary_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str summary_id: The `_id` of the summary to be removed. (required)
        :return: SummaryDeleted
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'summary_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_experiment_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_experiment_summary`")  # noqa: E501
        # verify the required parameter 'summary_id' is set
        if ('summary_id' not in params or
                params['summary_id'] is None):
            raise ValueError("Missing the required parameter `summary_id` when calling `delete_experiment_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'summary_id' in params:
            path_params['summaryId'] = params['summary_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/summary/{summaryId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SummaryDeleted',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_property_type_from_experiment(self, id, activity_id, resource_def_id, property_type_id, **kwargs):  # noqa: E501
        """delete_property_type_from_experiment  # noqa: E501

        Performs a 'soft delete' on an existing experiment. The experiment will still be accessible through the api when searching by `_id` on `getExperiment` endpoint or with the query parameter `deleted` on `listExperiments` endpoint. A deleted experiment will be marked as purged and remain in the database for 7 days. The experiment will then be permanently deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_property_type_from_experiment(id, activity_id, resource_def_id, property_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type. (required)
        :param str property_type_id: The `_id` of the property type. (required)
        :return: SuccessfullyDelete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_property_type_from_experiment_with_http_info(id, activity_id, resource_def_id, property_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_property_type_from_experiment_with_http_info(id, activity_id, resource_def_id, property_type_id, **kwargs)  # noqa: E501
            return data

    def delete_property_type_from_experiment_with_http_info(self, id, activity_id, resource_def_id, property_type_id, **kwargs):  # noqa: E501
        """delete_property_type_from_experiment  # noqa: E501

        Performs a 'soft delete' on an existing experiment. The experiment will still be accessible through the api when searching by `_id` on `getExperiment` endpoint or with the query parameter `deleted` on `listExperiments` endpoint. A deleted experiment will be marked as purged and remain in the database for 7 days. The experiment will then be permanently deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_property_type_from_experiment_with_http_info(id, activity_id, resource_def_id, property_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type. (required)
        :param str property_type_id: The `_id` of the property type. (required)
        :return: SuccessfullyDelete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'resource_def_id', 'property_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_property_type_from_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_property_type_from_experiment`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `delete_property_type_from_experiment`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `delete_property_type_from_experiment`")  # noqa: E501
        # verify the required parameter 'property_type_id' is set
        if ('property_type_id' not in params or
                params['property_type_id'] is None):
            raise ValueError("Missing the required parameter `property_type_id` when calling `delete_property_type_from_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501
        if 'property_type_id' in params:
            path_params['propertyTypeId'] = params['property_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/resource-type/{resourceDefId}/property-type/{propertyTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessfullyDelete',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_resource_type_from_experiment(self, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """delete_resource_type_from_experiment  # noqa: E501

        Ad hoc removal of a resource type from the `input` or `output` of an activity on an experiment. Only ad hoc added resource types can be deleted from the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resource_type_from_experiment(id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment the resource type is being deleted from. (required)
        :param str activity_id: The `_id` of the activity the resource type is being deleted from. Refers to the Process Activity `_id` from the `listActivities` endpoint. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the the resource type. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_resource_type_from_experiment_with_http_info(id, activity_id, resource_def_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_resource_type_from_experiment_with_http_info(id, activity_id, resource_def_id, **kwargs)  # noqa: E501
            return data

    def delete_resource_type_from_experiment_with_http_info(self, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """delete_resource_type_from_experiment  # noqa: E501

        Ad hoc removal of a resource type from the `input` or `output` of an activity on an experiment. Only ad hoc added resource types can be deleted from the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resource_type_from_experiment_with_http_info(id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment the resource type is being deleted from. (required)
        :param str activity_id: The `_id` of the activity the resource type is being deleted from. Refers to the Process Activity `_id` from the `listActivities` endpoint. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the the resource type. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'resource_def_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_resource_type_from_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_resource_type_from_experiment`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `delete_resource_type_from_experiment`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `delete_resource_type_from_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/resource-type/{resourceDefId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tag_from_experiment(self, id, tag_id, **kwargs):  # noqa: E501
        """delete_tag_from_experiment  # noqa: E501

        Removes a tag from an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tag_from_experiment(id, tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str tag_id: The `_id` of the tag to be removed from the experiment. (required)
        :return: TagRemove
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tag_from_experiment_with_http_info(id, tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tag_from_experiment_with_http_info(id, tag_id, **kwargs)  # noqa: E501
            return data

    def delete_tag_from_experiment_with_http_info(self, id, tag_id, **kwargs):  # noqa: E501
        """delete_tag_from_experiment  # noqa: E501

        Removes a tag from an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tag_from_experiment_with_http_info(id, tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str tag_id: The `_id` of the tag to be removed from the experiment. (required)
        :return: TagRemove
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tag_from_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_tag_from_experiment`")  # noqa: E501
        # verify the required parameter 'tag_id' is set
        if ('tag_id' not in params or
                params['tag_id'] is None):
            raise ValueError("Missing the required parameter `tag_id` when calling `delete_tag_from_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'tag_id' in params:
            path_params['tagId'] = params['tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/tag/{tagId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TagRemove',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_experiment_data(self, id, **kwargs):  # noqa: E501
        """export_experiment_data  # noqa: E501

        Triggers the export of experiment data or returns the latest exported data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_experiment_data(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str filename: The desired name to be given to downloadable file.
        :param str file_type: The desired data format type (defaults to `text/csv`) to be given to downloadable file. Can be one of `text/csv`, `binary/parquet`.
        :param bool refresh: If set to true forces a regeneration of all datatables regardless of being stale or not.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_experiment_data_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.export_experiment_data_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def export_experiment_data_with_http_info(self, id, **kwargs):  # noqa: E501
        """export_experiment_data  # noqa: E501

        Triggers the export of experiment data or returns the latest exported data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_experiment_data_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str filename: The desired name to be given to downloadable file.
        :param str file_type: The desired data format type (defaults to `text/csv`) to be given to downloadable file. Can be one of `text/csv`, `binary/parquet`.
        :param bool refresh: If set to true forces a regeneration of all datatables regardless of being stale or not.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filename', 'file_type', 'refresh']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_experiment_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `export_experiment_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'file_type' in params:
            query_params.append(('fileType', params['file_type']))  # noqa: E501
        if 'refresh' in params:
            query_params.append(('refresh', params['refresh']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/export/data', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_experiment_data_status(self, id, **kwargs):  # noqa: E501
        """export_experiment_data_status  # noqa: E501

        Returns the status of the exported experiment data for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_experiment_data_status(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment that has been exported. (required)
        :param str filename: The desired name to be given to downloadable file.
        :param str file_type: The desired data format type (defaults to `text/csv`) to be given to downloadable file. Can be one of `text/csv`, `binary/parquet`.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_experiment_data_status_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.export_experiment_data_status_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def export_experiment_data_status_with_http_info(self, id, **kwargs):  # noqa: E501
        """export_experiment_data_status  # noqa: E501

        Returns the status of the exported experiment data for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_experiment_data_status_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment that has been exported. (required)
        :param str filename: The desired name to be given to downloadable file.
        :param str file_type: The desired data format type (defaults to `text/csv`) to be given to downloadable file. Can be one of `text/csv`, `binary/parquet`.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filename', 'file_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_experiment_data_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `export_experiment_data_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'file_type' in params:
            query_params.append(('fileType', params['file_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/export/data/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_experiment(self, id, **kwargs):  # noqa: E501
        """get_experiment  # noqa: E501

        Returns the detail for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_experiment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :return: Experiment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_experiment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_experiment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_experiment_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_experiment  # noqa: E501

        Returns the detail for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_experiment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :return: Experiment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Experiment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_experiment_comment(self, id, comment_id, **kwargs):  # noqa: E501
        """get_experiment_comment  # noqa: E501

        Returns the specific comment (or observation) associated with an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_experiment_comment(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_experiment_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_experiment_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
            return data

    def get_experiment_comment_with_http_info(self, id, comment_id, **kwargs):  # noqa: E501
        """get_experiment_comment  # noqa: E501

        Returns the specific comment (or observation) associated with an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_experiment_comment_with_http_info(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_experiment_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_experiment_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `get_experiment_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/comment/{commentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_experiment_data_clean(self, id, activity_id, **kwargs):  # noqa: E501
        """get_experiment_data_clean  # noqa: E501

        Returns the clean data tables for an activity (step). Data Cleaning transforms raw data tables that is collected onto runs into a more uniform and structured form.  Raw data is any data that is uploaded, acquired via the data agent, or manually entered. Each time one or more values of raw data are loaded onto a property on a run, that data is stored as a separate data group.  The relationship between data in separate groups is not made explicit until a Data Cleaning method is applied. For more information regarding data cleaning, please our article [Working with Data Cleanup Procedures](https://riffyn.zendesk.com/hc/en-us/articles/225456227-Working-with-Data-Cleanup-Procedures)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_experiment_data_clean(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: The `_id` of the activity (step). Refers to the Process level Activity `_id`. (required)
        :param list[str] rgid: A comma spearated list of run group ids. The `runMap` and `datatables` objects will be filtered to only include data from runs in these run groups. E.g. `?rgid=PEHYK7LzGpqEWuNPQ,ypPdk7K5Hrai9djNi` 
        :param list[str] rid: A comma spearated list of run ids. The `runMap` and `datatables` objects will be filtered to only include data from these runs. E.g. `?rid=MTokEKhfqLNJk6t8A,XmnkEwGoC3nJ9tA9y` 
        :param list[str] rdid: A comma spearated list of resourceDefIds. The `datatables` object will be filtered to only include runs that contain the specified values. E.g. `?rdid=BQZhhN7PnZTf2CqmE,ENKA9T2Ph7Wszbeaf` 
        :param str vt: Filters columns returned in the datatables to the specified `valueType`. Columns with no `valueType` property will still be included in the datatables. 
        :param str rl: Filter runs to only those that contain a resource with the specified resource label. You may look up the resource label using the `getResource` method. 
        :return: DataTables
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_experiment_data_clean_with_http_info(id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_experiment_data_clean_with_http_info(id, activity_id, **kwargs)  # noqa: E501
            return data

    def get_experiment_data_clean_with_http_info(self, id, activity_id, **kwargs):  # noqa: E501
        """get_experiment_data_clean  # noqa: E501

        Returns the clean data tables for an activity (step). Data Cleaning transforms raw data tables that is collected onto runs into a more uniform and structured form.  Raw data is any data that is uploaded, acquired via the data agent, or manually entered. Each time one or more values of raw data are loaded onto a property on a run, that data is stored as a separate data group.  The relationship between data in separate groups is not made explicit until a Data Cleaning method is applied. For more information regarding data cleaning, please our article [Working with Data Cleanup Procedures](https://riffyn.zendesk.com/hc/en-us/articles/225456227-Working-with-Data-Cleanup-Procedures)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_experiment_data_clean_with_http_info(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: The `_id` of the activity (step). Refers to the Process level Activity `_id`. (required)
        :param list[str] rgid: A comma spearated list of run group ids. The `runMap` and `datatables` objects will be filtered to only include data from runs in these run groups. E.g. `?rgid=PEHYK7LzGpqEWuNPQ,ypPdk7K5Hrai9djNi` 
        :param list[str] rid: A comma spearated list of run ids. The `runMap` and `datatables` objects will be filtered to only include data from these runs. E.g. `?rid=MTokEKhfqLNJk6t8A,XmnkEwGoC3nJ9tA9y` 
        :param list[str] rdid: A comma spearated list of resourceDefIds. The `datatables` object will be filtered to only include runs that contain the specified values. E.g. `?rdid=BQZhhN7PnZTf2CqmE,ENKA9T2Ph7Wszbeaf` 
        :param str vt: Filters columns returned in the datatables to the specified `valueType`. Columns with no `valueType` property will still be included in the datatables. 
        :param str rl: Filter runs to only those that contain a resource with the specified resource label. You may look up the resource label using the `getResource` method. 
        :return: DataTables
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'rgid', 'rid', 'rdid', 'vt', 'rl']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_experiment_data_clean" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_experiment_data_clean`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `get_experiment_data_clean`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []
        if 'rgid' in params:
            query_params.append(('rgid', params['rgid']))  # noqa: E501
            collection_formats['rgid'] = 'csv'  # noqa: E501
        if 'rid' in params:
            query_params.append(('rid', params['rid']))  # noqa: E501
            collection_formats['rid'] = 'csv'  # noqa: E501
        if 'rdid' in params:
            query_params.append(('rdid', params['rdid']))  # noqa: E501
            collection_formats['rdid'] = 'csv'  # noqa: E501
        if 'vt' in params:
            query_params.append(('vt', params['vt']))  # noqa: E501
        if 'rl' in params:
            query_params.append(('rl', params['rl']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/step/{activityId}/data/clean', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataTables',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_experiment_data_raw(self, id, activity_id, **kwargs):  # noqa: E501
        """get_experiment_data_raw  # noqa: E501

        Returns the raw data tables for an activity (step). Raw data is any data that is uploaded, acquired via the data agent, or manually entered. Each time one or more values of raw data are loaded onto a property on a run, that data is stored as a separate data group.  The relationship between data in separate groups is not made explicit until a Data Cleaning method is applied.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_experiment_data_raw(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: The `_id` of the activity (step). Refers to the Process level Activity `_id`. (required)
        :param list[str] rgid: A comma spearated list of run group ids. The `runMap` and `datatables` objects will be filtered to only include data from runs in these run groups. E.g. `?rgid=PEHYK7LzGpqEWuNPQ,ypPdk7K5Hrai9djNi` 
        :param list[str] rid: A comma spearated list of run ids. The `runMap` and `datatables` objects will be filtered to only include data from these runs. E.g. `?rid=MTokEKhfqLNJk6t8A,XmnkEwGoC3nJ9tA9y` 
        :param list[str] rnum: A comma spearated list of run numbers. The `runMap` and `datatables` objects will be filtered to only include data from these runs. E.g. `?rnum=1,2,3,4,5` 
        :param list[str] rdid: A comma spearated list of resourceDefIds. The `datatables` object will be filtered to only include runs that contain the specified values. E.g. `?rdid=BQZhhN7PnZTf2CqmE,ENKA9T2Ph7Wszbeaf` 
        :param str vt: Filters columns returned in the datatables to the specified `valueType`. Columns with no `valueType` property will still be included in the datatables. 
        :param str rl: Filter runs to only those that contain a resource with the specified resource label. You may look up the resource label using the `getResource` method. 
        :return: DataTables
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_experiment_data_raw_with_http_info(id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_experiment_data_raw_with_http_info(id, activity_id, **kwargs)  # noqa: E501
            return data

    def get_experiment_data_raw_with_http_info(self, id, activity_id, **kwargs):  # noqa: E501
        """get_experiment_data_raw  # noqa: E501

        Returns the raw data tables for an activity (step). Raw data is any data that is uploaded, acquired via the data agent, or manually entered. Each time one or more values of raw data are loaded onto a property on a run, that data is stored as a separate data group.  The relationship between data in separate groups is not made explicit until a Data Cleaning method is applied.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_experiment_data_raw_with_http_info(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: The `_id` of the activity (step). Refers to the Process level Activity `_id`. (required)
        :param list[str] rgid: A comma spearated list of run group ids. The `runMap` and `datatables` objects will be filtered to only include data from runs in these run groups. E.g. `?rgid=PEHYK7LzGpqEWuNPQ,ypPdk7K5Hrai9djNi` 
        :param list[str] rid: A comma spearated list of run ids. The `runMap` and `datatables` objects will be filtered to only include data from these runs. E.g. `?rid=MTokEKhfqLNJk6t8A,XmnkEwGoC3nJ9tA9y` 
        :param list[str] rnum: A comma spearated list of run numbers. The `runMap` and `datatables` objects will be filtered to only include data from these runs. E.g. `?rnum=1,2,3,4,5` 
        :param list[str] rdid: A comma spearated list of resourceDefIds. The `datatables` object will be filtered to only include runs that contain the specified values. E.g. `?rdid=BQZhhN7PnZTf2CqmE,ENKA9T2Ph7Wszbeaf` 
        :param str vt: Filters columns returned in the datatables to the specified `valueType`. Columns with no `valueType` property will still be included in the datatables. 
        :param str rl: Filter runs to only those that contain a resource with the specified resource label. You may look up the resource label using the `getResource` method. 
        :return: DataTables
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'rgid', 'rid', 'rnum', 'rdid', 'vt', 'rl']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_experiment_data_raw" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_experiment_data_raw`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `get_experiment_data_raw`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []
        if 'rgid' in params:
            query_params.append(('rgid', params['rgid']))  # noqa: E501
            collection_formats['rgid'] = 'csv'  # noqa: E501
        if 'rid' in params:
            query_params.append(('rid', params['rid']))  # noqa: E501
            collection_formats['rid'] = 'csv'  # noqa: E501
        if 'rnum' in params:
            query_params.append(('rnum', params['rnum']))  # noqa: E501
            collection_formats['rnum'] = 'csv'  # noqa: E501
        if 'rdid' in params:
            query_params.append(('rdid', params['rdid']))  # noqa: E501
            collection_formats['rdid'] = 'csv'  # noqa: E501
        if 'vt' in params:
            query_params.append(('vt', params['vt']))  # noqa: E501
        if 'rl' in params:
            query_params.append(('rl', params['rl']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/step/{activityId}/data/raw', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataTables',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_experiment_summary(self, id, **kwargs):  # noqa: E501
        """get_experiment_summary  # noqa: E501

        Returns the summary and purpose for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_experiment_summary(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :return: ExperimentSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_experiment_summary_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_experiment_summary_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_experiment_summary_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_experiment_summary  # noqa: E501

        Returns the summary and purpose for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_experiment_summary_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :return: ExperimentSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_experiment_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_experiment_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExperimentSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role_for_experiment(self, id, user_id, **kwargs):  # noqa: E501
        """get_role_for_experiment  # noqa: E501

        Returns the highest role for the specified user for the specific experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_for_experiment(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str user_id: The `_id` of the user. (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_for_experiment_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_for_experiment_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def get_role_for_experiment_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """get_role_for_experiment  # noqa: E501

        Returns the highest role for the specified user for the specific experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_for_experiment_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str user_id: The `_id` of the user. (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role_for_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_role_for_experiment`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_role_for_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/role/{userId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_experiment_activities(self, id, **kwargs):  # noqa: E501
        """list_experiment_activities  # noqa: E501

        List or search the activities (steps) associated with an experiment. When using `activityId`, use `objectId` or refer to the `_id` on the Process level activity (`listActivities` endpoint).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_experiment_activities(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash(`-`). A comma separated list may be used to sort by more than one field (e.g. `name,-label`). 
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param bool public: Toggles the result set between public and private data. Default value is `false`
        :return: Activities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_experiment_activities_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_experiment_activities_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_experiment_activities_with_http_info(self, id, **kwargs):  # noqa: E501
        """list_experiment_activities  # noqa: E501

        List or search the activities (steps) associated with an experiment. When using `activityId`, use `objectId` or refer to the `_id` on the Process level activity (`listActivities` endpoint).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_experiment_activities_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash(`-`). A comma separated list may be used to sort by more than one field (e.g. `name,-label`). 
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param bool public: Toggles the result set between public and private data. Default value is `false`
        :return: Activities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort', 'limit', 'offset', 'before', 'after', 'fields', 'name', 'creator', 'public']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_experiment_activities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_experiment_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501
        if 'public' in params:
            query_params.append(('public', params['public']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Activities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_experiment_comments(self, id, **kwargs):  # noqa: E501
        """list_experiment_comments  # noqa: E501

        Lists the comments (or observations) associated with an experiment. Includes activity, and group comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_experiment_comments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: Limits the result set to items associated with the `_id` of the specified activity. Refers to the Process level Activity `_id`.
        :param str group_id: Limits the result set to items associated with the `_id` of the specified group. The process `_id` is the `topGroupId`.
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Comments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_experiment_comments_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_experiment_comments_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_experiment_comments_with_http_info(self, id, **kwargs):  # noqa: E501
        """list_experiment_comments  # noqa: E501

        Lists the comments (or observations) associated with an experiment. Includes activity, and group comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_experiment_comments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: Limits the result set to items associated with the `_id` of the specified activity. Refers to the Process level Activity `_id`.
        :param str group_id: Limits the result set to items associated with the `_id` of the specified group. The process `_id` is the `topGroupId`.
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Comments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'group_id', 'limit', 'offset', 'before', 'after', 'modified_before', 'modified_after', 'fields', 'creator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_experiment_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_experiment_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'activity_id' in params:
            query_params.append(('activityId', params['activity_id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'modified_before' in params:
            query_params.append(('modified_before', params['modified_before']))  # noqa: E501
        if 'modified_after' in params:
            query_params.append(('modified_after', params['modified_after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_experiment_tags(self, id, **kwargs):  # noqa: E501
        """list_experiment_tags  # noqa: E501

        Returns the tags for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_experiment_tags(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_experiment_tags_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_experiment_tags_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_experiment_tags_with_http_info(self, id, **kwargs):  # noqa: E501
        """list_experiment_tags  # noqa: E501

        Returns the tags for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_experiment_tags_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'limit', 'offset', 'before', 'after', 'modified_before', 'modified_after', 'fields', 'creator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_experiment_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_experiment_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'modified_before' in params:
            query_params.append(('modified_before', params['modified_before']))  # noqa: E501
        if 'modified_after' in params:
            query_params.append(('modified_after', params['modified_after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_experiments(self, **kwargs):  # noqa: E501
        """list_experiments  # noqa: E501

        List or search the user's experiments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_experiments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash (`-`). A comma separated list may be used to sort by more than one field (e.g. `process_name,-label`). 
        :param str top_group_id: Limits the result set to items associated with the `_id` of the specified process
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param bool public: Toggles the result set between public and private data. Default value is `false`
        :param bool deleted: Limits the results to deleted items, excludes them, or returns both deleted and non-deleted items if set to `all `. Default value       is `false`, to only show non-deleted items. 
        :return: Experiments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_experiments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_experiments_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_experiments_with_http_info(self, **kwargs):  # noqa: E501
        """list_experiments  # noqa: E501

        List or search the user's experiments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_experiments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash (`-`). A comma separated list may be used to sort by more than one field (e.g. `process_name,-label`). 
        :param str top_group_id: Limits the result set to items associated with the `_id` of the specified process
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param bool public: Toggles the result set between public and private data. Default value is `false`
        :param bool deleted: Limits the results to deleted items, excludes them, or returns both deleted and non-deleted items if set to `all `. Default value       is `false`, to only show non-deleted items. 
        :return: Experiments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'top_group_id', 'limit', 'modified_before', 'modified_after', 'offset', 'before', 'after', 'fields', 'name', 'creator', 'public', 'deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_experiments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501
        if 'top_group_id' in params:
            query_params.append(('topGroupId', params['top_group_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'modified_before' in params:
            query_params.append(('modified_before', params['modified_before']))  # noqa: E501
        if 'modified_after' in params:
            query_params.append(('modified_after', params['modified_after']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501
        if 'public' in params:
            query_params.append(('public', params['public']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Experiments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_replies_to_experiment_comment(self, id, comment_id, **kwargs):  # noqa: E501
        """list_replies_to_experiment_comment  # noqa: E501

        Lists replies to a specific comment (or observation) associated with an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_replies_to_experiment_comment(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Comments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_replies_to_experiment_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_replies_to_experiment_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
            return data

    def list_replies_to_experiment_comment_with_http_info(self, id, comment_id, **kwargs):  # noqa: E501
        """list_replies_to_experiment_comment  # noqa: E501

        Lists replies to a specific comment (or observation) associated with an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_replies_to_experiment_comment_with_http_info(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Comments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'comment_id', 'limit', 'offset', 'before', 'after', 'modified_before', 'modified_after', 'fields', 'creator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_replies_to_experiment_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_replies_to_experiment_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `list_replies_to_experiment_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'modified_before' in params:
            query_params.append(('modified_before', params['modified_before']))  # noqa: E501
        if 'modified_after' in params:
            query_params.append(('modified_after', params['modified_after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/comment/{commentId}/replies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reply_to_expriment_comment(self, body, id, comment_id, **kwargs):  # noqa: E501
        """reply_to_expriment_comment  # noqa: E501

        Replies to a specific comment (or observation) associated with an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reply_to_expriment_comment(body, id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentMessageBody body: A JSON object containing the necessary properties to reply to a comment. (required)
        :param str id: The `_id` of the experiment. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: CommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reply_to_expriment_comment_with_http_info(body, id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reply_to_expriment_comment_with_http_info(body, id, comment_id, **kwargs)  # noqa: E501
            return data

    def reply_to_expriment_comment_with_http_info(self, body, id, comment_id, **kwargs):  # noqa: E501
        """reply_to_expriment_comment  # noqa: E501

        Replies to a specific comment (or observation) associated with an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reply_to_expriment_comment_with_http_info(body, id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentMessageBody body: A JSON object containing the necessary properties to reply to a comment. (required)
        :param str id: The `_id` of the experiment. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: CommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reply_to_expriment_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `reply_to_expriment_comment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `reply_to_expriment_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `reply_to_expriment_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/comment/{commentId}/reply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def share_experiment(self, body, id, **kwargs):  # noqa: E501
        """share_experiment  # noqa: E501

        Share an existing experiment with a user, team, or organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.share_experiment(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShareExperimentBody body: A JSON object containing the necessary properties to share the property. (required)
        :param str id: The `_id` of the experiment. (required)
        :return: SuccessShared
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.share_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.share_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def share_experiment_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """share_experiment  # noqa: E501

        Share an existing experiment with a user, team, or organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.share_experiment_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShareExperimentBody body: A JSON object containing the necessary properties to share the property. (required)
        :param str id: The `_id` of the experiment. (required)
        :return: SuccessShared
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method share_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `share_experiment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `share_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/accessible-to', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessShared',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unshare_experiment(self, body, id, principal_id, **kwargs):  # noqa: E501
        """unshare_experiment  # noqa: E501

        Revoke access to an existing experiment from a user, team, or organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unshare_experiment(body, id, principal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnshareExperimentBody body: A JSON object containing the necessary properties to revoke access to the experiment. (required)
        :param str id: The `_id` of the experiment. (required)
        :param str principal_id: The `_id` of the entity being revoked access to the experiment. (required)
        :return: SuccessfullyUnshared
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unshare_experiment_with_http_info(body, id, principal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unshare_experiment_with_http_info(body, id, principal_id, **kwargs)  # noqa: E501
            return data

    def unshare_experiment_with_http_info(self, body, id, principal_id, **kwargs):  # noqa: E501
        """unshare_experiment  # noqa: E501

        Revoke access to an existing experiment from a user, team, or organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unshare_experiment_with_http_info(body, id, principal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnshareExperimentBody body: A JSON object containing the necessary properties to revoke access to the experiment. (required)
        :param str id: The `_id` of the experiment. (required)
        :param str principal_id: The `_id` of the entity being revoked access to the experiment. (required)
        :return: SuccessfullyUnshared
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'principal_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unshare_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `unshare_experiment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `unshare_experiment`")  # noqa: E501
        # verify the required parameter 'principal_id' is set
        if ('principal_id' not in params or
                params['principal_id'] is None):
            raise ValueError("Missing the required parameter `principal_id` when calling `unshare_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'principal_id' in params:
            path_params['principalId'] = params['principal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/accessible-to/{principalId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessfullyUnshared',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_experiment(self, body, id, **kwargs):  # noqa: E501
        """update_experiment  # noqa: E501

        Updates an existing experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_experiment(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateExperimentBody body: A JSON object containing the properties of the experiment you would like to update. (required)
        :param str id: The `_id` of the experiment. (required)
        :return: Experiment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_experiment_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_experiment_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """update_experiment  # noqa: E501

        Updates an existing experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_experiment_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateExperimentBody body: A JSON object containing the properties of the experiment you would like to update. (required)
        :param str id: The `_id` of the experiment. (required)
        :return: Experiment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_experiment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Experiment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_experiment_comment(self, body, id, comment_id, **kwargs):  # noqa: E501
        """update_experiment_comment  # noqa: E501

        Updates the specific comment (or observation) associated with an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_experiment_comment(body, id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentMessageBody body: A JSON object containing the necessary properties to create a new comment (or observation). (required)
        :param str id: The `_id` of the experiment. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: CommentUpdated
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_experiment_comment_with_http_info(body, id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_experiment_comment_with_http_info(body, id, comment_id, **kwargs)  # noqa: E501
            return data

    def update_experiment_comment_with_http_info(self, body, id, comment_id, **kwargs):  # noqa: E501
        """update_experiment_comment  # noqa: E501

        Updates the specific comment (or observation) associated with an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_experiment_comment_with_http_info(body, id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentMessageBody body: A JSON object containing the necessary properties to create a new comment (or observation). (required)
        :param str id: The `_id` of the experiment. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: CommentUpdated
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_experiment_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_experiment_comment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_experiment_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `update_experiment_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/comment/{commentId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentUpdated',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_experiment_summary(self, body, id, summary_id, **kwargs):  # noqa: E501
        """update_experiment_summary  # noqa: E501

        Updates the summary and purpose for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_experiment_summary(body, id, summary_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SummaryBody body: A JSON object containing the options for creating the summary. (required)
        :param str id: The `_id` of the experiment. (required)
        :param str summary_id: The `_id` of the summary. (required)
        :return: ExperimentSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_experiment_summary_with_http_info(body, id, summary_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_experiment_summary_with_http_info(body, id, summary_id, **kwargs)  # noqa: E501
            return data

    def update_experiment_summary_with_http_info(self, body, id, summary_id, **kwargs):  # noqa: E501
        """update_experiment_summary  # noqa: E501

        Updates the summary and purpose for the specified experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_experiment_summary_with_http_info(body, id, summary_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SummaryBody body: A JSON object containing the options for creating the summary. (required)
        :param str id: The `_id` of the experiment. (required)
        :param str summary_id: The `_id` of the summary. (required)
        :return: ExperimentSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'summary_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_experiment_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_experiment_summary`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_experiment_summary`")  # noqa: E501
        # verify the required parameter 'summary_id' is set
        if ('summary_id' not in params or
                params['summary_id'] is None):
            raise ValueError("Missing the required parameter `summary_id` when calling `update_experiment_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'summary_id' in params:
            path_params['summaryId'] = params['summary_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/summary/{summaryId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExperimentSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_property_type_on_experiment(self, id, activity_id, resource_def_id, property_type_id, **kwargs):  # noqa: E501
        """update_property_type_on_experiment  # noqa: E501

        Ad hoc update of a property type on a resource type on the `input` or `output` of an activity on a experiment. Both ad hoc and process design property types can be updated from the experiment but changes will not appear in process design. Allows for setting a different unit than the default unit for the property.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_property_type_on_experiment(id, activity_id, resource_def_id, property_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type. (required)
        :param str property_type_id: The `_id` of the property type. (required)
        :param Body5 body: A JSON object containing the options for removing the property type.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_property_type_on_experiment_with_http_info(id, activity_id, resource_def_id, property_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_property_type_on_experiment_with_http_info(id, activity_id, resource_def_id, property_type_id, **kwargs)  # noqa: E501
            return data

    def update_property_type_on_experiment_with_http_info(self, id, activity_id, resource_def_id, property_type_id, **kwargs):  # noqa: E501
        """update_property_type_on_experiment  # noqa: E501

        Ad hoc update of a property type on a resource type on the `input` or `output` of an activity on a experiment. Both ad hoc and process design property types can be updated from the experiment but changes will not appear in process design. Allows for setting a different unit than the default unit for the property.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_property_type_on_experiment_with_http_info(id, activity_id, resource_def_id, property_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str activity_id: The `_id` of the activity. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type. (required)
        :param str property_type_id: The `_id` of the property type. (required)
        :param Body5 body: A JSON object containing the options for removing the property type.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'resource_def_id', 'property_type_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_property_type_on_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_property_type_on_experiment`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `update_property_type_on_experiment`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `update_property_type_on_experiment`")  # noqa: E501
        # verify the required parameter 'property_type_id' is set
        if ('property_type_id' not in params or
                params['property_type_id'] is None):
            raise ValueError("Missing the required parameter `property_type_id` when calling `update_property_type_on_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501
        if 'property_type_id' in params:
            path_params['propertyTypeId'] = params['property_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/resource-type/{resourceDefId}/property-type/{propertyTypeId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_resource_type_on_experiment(self, body, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """update_resource_type_on_experiment  # noqa: E501

        Change a resource type in the `input` or `output` of an activity on an experiment. Both ad hoc and process design resource types can be changed from the experiment but changes will not appear in process design.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resource_type_on_experiment(body, id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body2 body: A JSON object containing the options for changing the resource type. (required)
        :param str id: The `_id` of the experiment the resource type is being changed for. (required)
        :param str activity_id: The `_id` of the activity the resource type is being changed for. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type being changed. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_resource_type_on_experiment_with_http_info(body, id, activity_id, resource_def_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_resource_type_on_experiment_with_http_info(body, id, activity_id, resource_def_id, **kwargs)  # noqa: E501
            return data

    def update_resource_type_on_experiment_with_http_info(self, body, id, activity_id, resource_def_id, **kwargs):  # noqa: E501
        """update_resource_type_on_experiment  # noqa: E501

        Change a resource type in the `input` or `output` of an activity on an experiment. Both ad hoc and process design resource types can be changed from the experiment but changes will not appear in process design.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resource_type_on_experiment_with_http_info(body, id, activity_id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body2 body: A JSON object containing the options for changing the resource type. (required)
        :param str id: The `_id` of the experiment the resource type is being changed for. (required)
        :param str activity_id: The `_id` of the activity the resource type is being changed for. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type being changed. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id', 'resource_def_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_resource_type_on_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_resource_type_on_experiment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_resource_type_on_experiment`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `update_resource_type_on_experiment`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `update_resource_type_on_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/resource-type/{resourceDefId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_config_status(self, id, activity_id, task_id, **kwargs):  # noqa: E501
        """upload_config_status  # noqa: E501

        Returns the status of the selected data uploaded from a file and a upload configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_config_status(id, activity_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str task_id: The `_id` of the task for the applied upload config`. (required)
        :return: FileUploadStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_config_status_with_http_info(id, activity_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_config_status_with_http_info(id, activity_id, task_id, **kwargs)  # noqa: E501
            return data

    def upload_config_status_with_http_info(self, id, activity_id, task_id, **kwargs):  # noqa: E501
        """upload_config_status  # noqa: E501

        Returns the status of the selected data uploaded from a file and a upload configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_config_status_with_http_info(id, activity_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str task_id: The `_id` of the task for the applied upload config`. (required)
        :return: FileUploadStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_config_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `upload_config_status`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `upload_config_status`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `upload_config_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/apply-config/{taskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileUploadStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_data_file(self, id, activity_id, **kwargs):  # noqa: E501
        """upload_data_file  # noqa: E501

        Upload a file to be used with an upload configuration to add data to an activity. The file to be uploaded should be attached to the request body as a binary, or in curl request, include path to file `-T/Folder/path/to/File`. (Sample code is incomplete.) Content-Type for file must be one of these MIME types:  (the default is a .csv file, as illustrated in sample code)   | Ext.  | MIME Type                                                                  |  | ----- | -------------------------------------------------------------------------- |  | .csv  | text/csv                                                                   |  | .tsv  | text/tab-separated-values                                                  |  | .dsv  | text/csv                                                                   |  | .tab  | text/plain                                                                 |  | .txt  | text/plain                                                                 |  | .xlsx | application/vnd.openxmlformats-officedocument.spreadsheetml.sheet          |  | .xls  | application/vnd.ms-excel                                                   |  | .xlsm | application/vnd.ms-excel.sheet.macroenabled.12                             |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_data_file(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str name: The name to be attributed to the file being uploaded. The file extension on the name will define how the file is parsed. If no extension is defined the file will be parsed as a character separated file. File extension and content-type must correspond (see chart in description). When using the file extension the content-type can be omitted.
        :return: UploadFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_data_file_with_http_info(id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_data_file_with_http_info(id, activity_id, **kwargs)  # noqa: E501
            return data

    def upload_data_file_with_http_info(self, id, activity_id, **kwargs):  # noqa: E501
        """upload_data_file  # noqa: E501

        Upload a file to be used with an upload configuration to add data to an activity. The file to be uploaded should be attached to the request body as a binary, or in curl request, include path to file `-T/Folder/path/to/File`. (Sample code is incomplete.) Content-Type for file must be one of these MIME types:  (the default is a .csv file, as illustrated in sample code)   | Ext.  | MIME Type                                                                  |  | ----- | -------------------------------------------------------------------------- |  | .csv  | text/csv                                                                   |  | .tsv  | text/tab-separated-values                                                  |  | .dsv  | text/csv                                                                   |  | .tab  | text/plain                                                                 |  | .txt  | text/plain                                                                 |  | .xlsx | application/vnd.openxmlformats-officedocument.spreadsheetml.sheet          |  | .xls  | application/vnd.ms-excel                                                   |  | .xlsm | application/vnd.ms-excel.sheet.macroenabled.12                             |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_data_file_with_http_info(id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :param str name: The name to be attributed to the file being uploaded. The file extension on the name will define how the file is parsed. If no extension is defined the file will be parsed as a character separated file. File extension and content-type must correspond (see chart in description). When using the file extension the content-type can be omitted.
        :return: UploadFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_data_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `upload_data_file`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `upload_data_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadFileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

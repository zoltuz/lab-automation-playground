# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RunApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_batch_run_data(self, body, id, activity_id, **kwargs):  # noqa: E501
        """add_batch_run_data  # noqa: E501

        Writes values to multiple `propertyTypeId` and `resourceDefId` in one api call. A batch is a set of data objects which conform to the addRunData endpoint format. Each object within the batch array writes data to one `propertyTypeId` within a `resourceDefId` and can specify an `eventGroupId`. Multiple values can be sent for each data object by specifying a list of `eventId` and `value` objects. Data is added to a specific `eventGroupId`, a specific `runGroupId`, or a specific list of `runIds`. One of `runGroupId`, or `runIds` must be included in the request. Define the correct runId When using `eventGroupId`. Use `append` unless previously entered data is to be overwritten. Each element of batch data may be entered in a different order than in the request. To set values to one `propertyTypeId`, `resourceDefId`, and `eventGroupId` use `addRunData` endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_batch_run_data(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddBatchDataToInputBody body: A JSON object containing the batchData composed of a list of JSON objects with the necessary properties to add data. (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :return: RunDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_batch_run_data_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_batch_run_data_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
            return data

    def add_batch_run_data_with_http_info(self, body, id, activity_id, **kwargs):  # noqa: E501
        """add_batch_run_data  # noqa: E501

        Writes values to multiple `propertyTypeId` and `resourceDefId` in one api call. A batch is a set of data objects which conform to the addRunData endpoint format. Each object within the batch array writes data to one `propertyTypeId` within a `resourceDefId` and can specify an `eventGroupId`. Multiple values can be sent for each data object by specifying a list of `eventId` and `value` objects. Data is added to a specific `eventGroupId`, a specific `runGroupId`, or a specific list of `runIds`. One of `runGroupId`, or `runIds` must be included in the request. Define the correct runId When using `eventGroupId`. Use `append` unless previously entered data is to be overwritten. Each element of batch data may be entered in a different order than in the request. To set values to one `propertyTypeId`, `resourceDefId`, and `eventGroupId` use `addRunData` endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_batch_run_data_with_http_info(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddBatchDataToInputBody body: A JSON object containing the batchData composed of a list of JSON objects with the necessary properties to add data. (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :return: RunDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_batch_run_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_batch_run_data`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_batch_run_data`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `add_batch_run_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/add-batch-run-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunDataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_run_data(self, body, id, activity_id, **kwargs):  # noqa: E501
        """add_run_data  # noqa: E501

        Write values to one `propertyTypeId` within a `resourceDefId`. Multiple values can be sent by specifying a list of `eventId` and `value` objects. Data is added to a specific `eventGroupId`, a specific list of `runIds`, or a `runGroupId`. One of `runGroupId`, or `runIds` must be included in the request. Define only the correct runId when using `eventGroupId`. Use `append` unless previously entered data is to be overwritten. To set values to multiple `propertyTypeId`, `resourceDefId`, and `eventGroupId` use `batchAddRunData` endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_run_data(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddDataToInputBody body: A JSON object containing the necessary properties to add data. (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :return: RunDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_run_data_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_run_data_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
            return data

    def add_run_data_with_http_info(self, body, id, activity_id, **kwargs):  # noqa: E501
        """add_run_data  # noqa: E501

        Write values to one `propertyTypeId` within a `resourceDefId`. Multiple values can be sent by specifying a list of `eventId` and `value` objects. Data is added to a specific `eventGroupId`, a specific list of `runIds`, or a `runGroupId`. One of `runGroupId`, or `runIds` must be included in the request. Define only the correct runId when using `eventGroupId`. Use `append` unless previously entered data is to be overwritten. To set values to multiple `propertyTypeId`, `resourceDefId`, and `eventGroupId` use `batchAddRunData` endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_run_data_with_http_info(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddDataToInputBody body: A JSON object containing the necessary properties to add data. (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :return: RunDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_run_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_run_data`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_run_data`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `add_run_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/add-run-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunDataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_input(self, body, id, **kwargs):  # noqa: E501
        """assign_input  # noqa: E501

        Assigns a resource to a single input ( or `resourceDef` ) by `name` or by `resourceId`. Can be assigned to all runs for an activity (step) or for specific runs defined by an array of `runIds`. The `activityId` refers to the Process level activity `_id`. You must define either an `activityId` or an array of `runIds`, but not both. If you are adding a resource by `name` define only `runIds`. You can define a resource by `name` that does not have a `resourceId` in the resource inventory.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_input(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetResourceBody body: A JSON object containing the necessary properties to assign the resource. (required)
        :param str id: The `_id` of the experiment. (required)
        :return: Run
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_input_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_input_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def assign_input_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """assign_input  # noqa: E501

        Assigns a resource to a single input ( or `resourceDef` ) by `name` or by `resourceId`. Can be assigned to all runs for an activity (step) or for specific runs defined by an array of `runIds`. The `activityId` refers to the Process level activity `_id`. You must define either an `activityId` or an array of `runIds`, but not both. If you are adding a resource by `name` define only `runIds`. You can define a resource by `name` that does not have a `resourceId` in the resource inventory.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_input_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetResourceBody body: A JSON object containing the necessary properties to assign the resource. (required)
        :param str id: The `_id` of the experiment. (required)
        :return: Run
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_input" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assign_input`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assign_input`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/assign-input', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Run',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connect_runs_along_path(self, body, id, **kwargs):  # noqa: E501
        """connect_runs_along_path  # noqa: E501

        Connects runs, along a path, between two activities (steps) of an experiment. Connection will result in propagated runs on the activities included in the path. Define the activity id where the runs should split. To connect a run to multiple runs repeat run connection pattern accordingly: `upstreamRunIds: [runA, runB]` `downstreamRunIds: [run1, run2, run1, run2]` `ratio: [1,2]` results in runA being connected to run1 and run2 and runB will also be connected to run1 and run2.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connect_runs_along_path(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectRunsAlongPathBody body: (required)
        :param str id: The `_id` of the experiment. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.connect_runs_along_path_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.connect_runs_along_path_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def connect_runs_along_path_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """connect_runs_along_path  # noqa: E501

        Connects runs, along a path, between two activities (steps) of an experiment. Connection will result in propagated runs on the activities included in the path. Define the activity id where the runs should split. To connect a run to multiple runs repeat run connection pattern accordingly: `upstreamRunIds: [runA, runB]` `downstreamRunIds: [run1, run2, run1, run2]` `ratio: [1,2]` results in runA being connected to run1 and run2 and runB will also be connected to run1 and run2.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connect_runs_along_path_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectRunsAlongPathBody body: (required)
        :param str id: The `_id` of the experiment. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connect_runs_along_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `connect_runs_along_path`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `connect_runs_along_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/connect-runs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_run_group(self, body, id, activity_id, **kwargs):  # noqa: E501
        """create_run_group  # noqa: E501

        Create a new run group for a specific activity in an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_run_group(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewRunGroupBody body: A JSON object containing the necessary properties to create a new run. group (required)
        :param str id: The `_id` of the experiment to create the run group. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :return: RunGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_run_group_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_run_group_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
            return data

    def create_run_group_with_http_info(self, body, id, activity_id, **kwargs):  # noqa: E501
        """create_run_group  # noqa: E501

        Create a new run group for a specific activity in an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_run_group_with_http_info(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewRunGroupBody body: A JSON object containing the necessary properties to create a new run. group (required)
        :param str id: The `_id` of the experiment to create the run group. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :return: RunGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_run_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_run_group`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_run_group`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `create_run_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/activity/{activityId}/run-group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_runs(self, body, id, **kwargs):  # noqa: E501
        """create_runs  # noqa: E501

        Creates new runs for a specific activity, or run group, in an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_runs(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewRunsBody body: A JSON object containing the necessary properties to create new runs. (required)
        :param str id: The `_id` of the experiment. (required)
        :return: Runs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_runs_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_runs_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def create_runs_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """create_runs  # noqa: E501

        Creates new runs for a specific activity, or run group, in an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_runs_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewRunsBody body: A JSON object containing the necessary properties to create new runs. (required)
        :param str id: The `_id` of the experiment. (required)
        :return: Runs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_runs`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/add-runs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Runs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_run_data(self, body, id, activity_id, **kwargs):  # noqa: E501
        """delete_run_data  # noqa: E501

        Deletes values to one `propertyTypeId` within a `resourceDefId`. Data is deleted from a list of `runIds` and can specify `eventGroupId`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_run_data(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: A JSON object containing the necessary properties to remove data (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :return: SuccessfullyDelete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_run_data_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_run_data_with_http_info(body, id, activity_id, **kwargs)  # noqa: E501
            return data

    def delete_run_data_with_http_info(self, body, id, activity_id, **kwargs):  # noqa: E501
        """delete_run_data  # noqa: E501

        Deletes values to one `propertyTypeId` within a `resourceDefId`. Data is deleted from a list of `runIds` and can specify `eventGroupId`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_run_data_with_http_info(body, id, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: A JSON object containing the necessary properties to remove data (required)
        :param str id: The `_id` of the experiment to manage the data to. (required)
        :param str activity_id: The `_id` of activity (step) to add the data to. Refers to the Process Activity `_id` from the `listActivities` endpoint. When using the `listExperimentActivities` endpoint, use the `objectId`. (required)
        :return: SuccessfullyDelete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_run_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_run_data`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_run_data`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `delete_run_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/experiment/{id}/activity/{activityId}/delete-run-data', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessfullyDelete',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_run(self, id, run_id, **kwargs):  # noqa: E501
        """get_run  # noqa: E501

        Get a specific run for an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run(id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str run_id: The `_id` of the run. (required)
        :return: Run
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_run_with_http_info(id, run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_run_with_http_info(id, run_id, **kwargs)  # noqa: E501
            return data

    def get_run_with_http_info(self, id, run_id, **kwargs):  # noqa: E501
        """get_run  # noqa: E501

        Get a specific run for an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_with_http_info(id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str run_id: The `_id` of the run. (required)
        :return: Run
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_run`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `get_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'run_id' in params:
            path_params['runId'] = params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/run/{runId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Run',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_run_groups(self, id, **kwargs):  # noqa: E501
        """list_run_groups  # noqa: E501

        List or search the run groups for a specific experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash (`-`). A comma separated list may be used to sort by more than one field (e.g. `name,-label`). 
        :param str activity_id: Limits the result set to items associated with the `_id` of the specified activity. Refers to the Process level Activity `_id`.
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :return: RunGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_run_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_run_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_run_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """list_run_groups  # noqa: E501

        List or search the run groups for a specific experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash (`-`). A comma separated list may be used to sort by more than one field (e.g. `name,-label`). 
        :param str activity_id: Limits the result set to items associated with the `_id` of the specified activity. Refers to the Process level Activity `_id`.
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :return: RunGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort', 'activity_id', 'limit', 'offset', 'before', 'after', 'fields', 'name', 'creator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_run_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_run_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501
        if 'activity_id' in params:
            query_params.append(('activityId', params['activity_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/run-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunGroups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_run_paths(self, id, start, end, **kwargs):  # noqa: E501
        """list_run_paths  # noqa: E501

        Returns an array of potential run paths between two activities. If there are no possible paths between the `start` and `end` activities (steps), an empty array will be returned. Requires a path query: `?start={startActivityId}&end={endActivityId}`. The results of this query can be used to propagate runs down a specific path, using a specific `activitiesOrder` array.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_paths(id, start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str start: The `_id` of the starting process activity (step). This refers to the Process level activity `_id` (`listActivities` endpoint), use `objectId` when using the `listExperimentActivities` endpoint. (required)
        :param str end: The `_id` of the ending process activity (step). This refers to the Process level activity `_id` (`listActivities` endpoint), use `objectId` when using the `listExperimentActivities` endpoint. (required)
        :return: RunPaths
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_run_paths_with_http_info(id, start, end, **kwargs)  # noqa: E501
        else:
            (data) = self.list_run_paths_with_http_info(id, start, end, **kwargs)  # noqa: E501
            return data

    def list_run_paths_with_http_info(self, id, start, end, **kwargs):  # noqa: E501
        """list_run_paths  # noqa: E501

        Returns an array of potential run paths between two activities. If there are no possible paths between the `start` and `end` activities (steps), an empty array will be returned. Requires a path query: `?start={startActivityId}&end={endActivityId}`. The results of this query can be used to propagate runs down a specific path, using a specific `activitiesOrder` array.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_paths_with_http_info(id, start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str start: The `_id` of the starting process activity (step). This refers to the Process level activity `_id` (`listActivities` endpoint), use `objectId` when using the `listExperimentActivities` endpoint. (required)
        :param str end: The `_id` of the ending process activity (step). This refers to the Process level activity `_id` (`listActivities` endpoint), use `objectId` when using the `listExperimentActivities` endpoint. (required)
        :return: RunPaths
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_run_paths" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_run_paths`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `list_run_paths`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `list_run_paths`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/run-paths', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunPaths',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_runs(self, id, group_id, **kwargs):  # noqa: E501
        """list_runs  # noqa: E501

        List or search the runs for a specific experiment and run group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_runs(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str group_id: The `_id` of the run group, for the specified experiment. (required)
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash (`-`). A comma separated list may be used to sort by more than one field (e.g. `process_name,-label`). 
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :return: Runs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_runs_with_http_info(id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_runs_with_http_info(id, group_id, **kwargs)  # noqa: E501
            return data

    def list_runs_with_http_info(self, id, group_id, **kwargs):  # noqa: E501
        """list_runs  # noqa: E501

        List or search the runs for a specific experiment and run group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_runs_with_http_info(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str group_id: The `_id` of the run group, for the specified experiment. (required)
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash (`-`). A comma separated list may be used to sort by more than one field (e.g. `process_name,-label`). 
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :return: Runs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_id', 'sort', 'limit', 'offset', 'before', 'after', 'fields', 'name', 'creator', 'modified_before', 'modified_after']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_runs`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `list_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501
        if 'modified_before' in params:
            query_params.append(('modified_before', params['modified_before']))  # noqa: E501
        if 'modified_after' in params:
            query_params.append(('modified_after', params['modified_after']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/run-group/{groupId}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Runs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def propagate_runs_along_path(self, body, id, **kwargs):  # noqa: E501
        """propagate_runs_along_path  # noqa: E501

        Propagates runs, along a path, between two activities (steps) of an experiment. Before you can call this endpoint, you must first obtain the list of run paths from the `/experiment/{id}/run-paths` endpoint, and decide which path you want to use. The response will be a the list of runs generated in the `downstreamRunGroupId`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.propagate_runs_along_path(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PropagateRunsBody body: (required)
        :param str id: The `_id` of the experiment. (required)
        :return: Run
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.propagate_runs_along_path_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.propagate_runs_along_path_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def propagate_runs_along_path_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """propagate_runs_along_path  # noqa: E501

        Propagates runs, along a path, between two activities (steps) of an experiment. Before you can call this endpoint, you must first obtain the list of run paths from the `/experiment/{id}/run-paths` endpoint, and decide which path you want to use. The response will be a the list of runs generated in the `downstreamRunGroupId`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.propagate_runs_along_path_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PropagateRunsBody body: (required)
        :param str id: The `_id` of the experiment. (required)
        :return: Run
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method propagate_runs_along_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `propagate_runs_along_path`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `propagate_runs_along_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/propagate-runs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Run',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_run_overrides(self, body, id, **kwargs):  # noqa: E501
        """set_run_overrides  # noqa: E501

        Sets `overrideMap` values for one or more properties in either a list of runs, or an entire activity (step).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_run_overrides(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetRunOverridesBody body: (required)
        :param str id: The `_id` of the experiment. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_run_overrides_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_run_overrides_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def set_run_overrides_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """set_run_overrides  # noqa: E501

        Sets `overrideMap` values for one or more properties in either a list of runs, or an entire activity (step).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_run_overrides_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetRunOverridesBody body: (required)
        :param str id: The `_id` of the experiment. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_run_overrides" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_run_overrides`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `set_run_overrides`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/run-overrides/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unset_run_overrides(self, body, id, **kwargs):  # noqa: E501
        """unset_run_overrides  # noqa: E501

        Unsets a single `overrideMap` key, for either a list of runs, or an entire activity (step).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unset_run_overrides(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnsetRunOverridesBody body: The `_id` of the experiment. (required)
        :param str id: The `_id` of the experiment. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unset_run_overrides_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.unset_run_overrides_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def unset_run_overrides_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """unset_run_overrides  # noqa: E501

        Unsets a single `overrideMap` key, for either a list of runs, or an entire activity (step).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unset_run_overrides_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnsetRunOverridesBody body: The `_id` of the experiment. (required)
        :param str id: The `_id` of the experiment. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unset_run_overrides" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `unset_run_overrides`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `unset_run_overrides`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/run-overrides/unset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_run(self, id, run_id, **kwargs):  # noqa: E501
        """update_run  # noqa: E501

        Update the name, description or type of a run for a specific experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run(id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str run_id: The `_id` of the run to be updated. (required)
        :param UpdateRunBody body: A JSON object containing the properties of the run you would like to update.
        :return: Run
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_run_with_http_info(id, run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_run_with_http_info(id, run_id, **kwargs)  # noqa: E501
            return data

    def update_run_with_http_info(self, id, run_id, **kwargs):  # noqa: E501
        """update_run  # noqa: E501

        Update the name, description or type of a run for a specific experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run_with_http_info(id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str run_id: The `_id` of the run to be updated. (required)
        :param UpdateRunBody body: A JSON object containing the properties of the run you would like to update.
        :return: Run
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'run_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_run`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `update_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'run_id' in params:
            path_params['runId'] = params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/run/{runId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Run',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_run_status(self, id, run_id, **kwargs):  # noqa: E501
        """update_run_status  # noqa: E501

        Update the status of a run for a specific experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run_status(id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str run_id: The `_id` of the run to be updated. (required)
        :param UpdateRunStatusBody body: A JSON object containing the properties of the run you would like to update.
        :return: RunStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_run_status_with_http_info(id, run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_run_status_with_http_info(id, run_id, **kwargs)  # noqa: E501
            return data

    def update_run_status_with_http_info(self, id, run_id, **kwargs):  # noqa: E501
        """update_run_status  # noqa: E501

        Update the status of a run for a specific experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run_status_with_http_info(id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the experiment. (required)
        :param str run_id: The `_id` of the run to be updated. (required)
        :param UpdateRunStatusBody body: A JSON object containing the properties of the run you would like to update.
        :return: RunStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'run_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_run_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_run_status`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `update_run_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'run_id' in params:
            path_params['runId'] = params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/experiment/{id}/run/{runId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

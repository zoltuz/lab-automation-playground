# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProcessApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_connection(self, body, id, **kwargs):  # noqa: E501
        """add_connection  # noqa: E501

        Makes a connection between activities and/or groups for a resource type (indicated by its `resourceDefId`). ResourceDefs are the inputs and outputs of the process activity (step) which correspond to the resource type being connected. The resourceDefId for a group is the resourceDefId of the activity inside the group where the resource type exists. To connect a group, the resourceDefId must first be exported/imported from the activity inside the group where the resourceDef exists (Use `exportToEnclosingGroup` endpoint). Both activities and/or groups being connected must be at the same level. The connection will be reflected in the connections object of the enclosing group or the process.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_connection(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Connection body: A JSON object containing the necessary properties to add a connection. (required)
        :param str id: The `_id` of the process. (required)
        :return: SuccessfullyConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_connection_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_connection_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def add_connection_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """add_connection  # noqa: E501

        Makes a connection between activities and/or groups for a resource type (indicated by its `resourceDefId`). ResourceDefs are the inputs and outputs of the process activity (step) which correspond to the resource type being connected. The resourceDefId for a group is the resourceDefId of the activity inside the group where the resource type exists. To connect a group, the resourceDefId must first be exported/imported from the activity inside the group where the resourceDef exists (Use `exportToEnclosingGroup` endpoint). Both activities and/or groups being connected must be at the same level. The connection will be reflected in the connections object of the enclosing group or the process.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_connection_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Connection body: A JSON object containing the necessary properties to add a connection. (required)
        :param str id: The `_id` of the process. (required)
        :return: SuccessfullyConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_connection`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/connection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessfullyConnection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_process_comment(self, body, id, **kwargs):  # noqa: E501
        """add_process_comment  # noqa: E501

        Adds a comment (or design notes) to a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_process_comment(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentBody body: A JSON object containing the necessary properties to create a new comment (or observation). (required)
        :param str id: The `_id` of process. (required)
        :return: CommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_process_comment_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_process_comment_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def add_process_comment_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """add_process_comment  # noqa: E501

        Adds a comment (or design notes) to a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_process_comment_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentBody body: A JSON object containing the necessary properties to create a new comment (or observation). (required)
        :param str id: The `_id` of process. (required)
        :return: CommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_process_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_process_comment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_process_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/comment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_tag_to_process(self, body, id, **kwargs):  # noqa: E501
        """add_tag_to_process  # noqa: E501

        Adds a tag to an process. If the tag doesn't exist, it will create it and add it to the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tag_to_process(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body8 body: A JSON object containing the options for creating the tag. (required)
        :param str id: The `_id` of the process you would like to add the tag to. (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_tag_to_process_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_tag_to_process_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def add_tag_to_process_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """add_tag_to_process  # noqa: E501

        Adds a tag to an process. If the tag doesn't exist, it will create it and add it to the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tag_to_process_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body8 body: A JSON object containing the options for creating the tag. (required)
        :param str id: The `_id` of the process you would like to add the tag to. (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tag_to_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_tag_to_process`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_tag_to_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_group(self, body, id, **kwargs):  # noqa: E501
        """create_group  # noqa: E501

        Create a group within a process. Existing activities and groups can be added to the group being created. These entities must be siblings of the group being created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupBody body: A JSON object containing the necessary properties to create a new group. (required)
        :param str id: The `_id` of process. (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_group_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_group_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def create_group_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """create_group  # noqa: E501

        Create a group within a process. Existing activities and groups can be added to the group being created. These entities must be siblings of the group being created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupBody body: A JSON object containing the necessary properties to create a new group. (required)
        :param str id: The `_id` of process. (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_group`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_process(self, body, **kwargs):  # noqa: E501
        """create_process  # noqa: E501

        Create a new process. A process is a top level group that contains activities and other groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_process(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Process body: A JSON object containing the necessary properties to create a new topGroup. (required)
        :return: SuccessfullyCreation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_process_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_process_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_process_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_process  # noqa: E501

        Create a new process. A process is a top level group that contains activities and other groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_process_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Process body: A JSON object containing the necessary properties to create a new topGroup. (required)
        :return: SuccessfullyCreation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessfullyCreation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_connection(self, id, from_res_def_id, to_res_def_id, **kwargs):  # noqa: E501
        """delete_connection  # noqa: E501

        Deletes a connection between two entities (group or activity) for a resource type (indicated by its `resourceDefId`). ResourceDefs are the `inputs` and `outputs` of the process activity (step) which correspond to the resource type being disconnected. The `resourceDefId` for a group is the exported `resourceDefId` of the activity where the resource type exists. Both entities being disconnected must be at the same level unless removing an exported connection between an inner entity and its parent. When removing an exported connection the `resourceDefId` will be the same for both `toResDefId` and `fromResDefId`. If the entities are not at the top level for the process, the `parentId` of the entities must be defined. The connection will be deleted from the connections object of the enclosing group or the process.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connection(id, from_res_def_id, to_res_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :param str from_res_def_id: The `_id` of the `output` on the activity for the resource type the connection will be removed from. This activity may be within the group being disconnected. The `fromResDefId` must always be on the output of the connection being removed. (required)
        :param str to_res_def_id: The `_id` of the `input` on the activity for the resource type the connection will be removed from.  This activity may be within the group being disconnected. The `toResDefId` must always be on the input of the connection being removed. (required)
        :param str parent_id: The id of the parent group of both entities. If both entities are not at the toplevel for the process, the `parentId` for the entities must be included. When removing an exported connection the parent is the group enclosing the entity with the exported `resourceDefId`.
        :return: SuccessfullyDelete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_connection_with_http_info(id, from_res_def_id, to_res_def_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_connection_with_http_info(id, from_res_def_id, to_res_def_id, **kwargs)  # noqa: E501
            return data

    def delete_connection_with_http_info(self, id, from_res_def_id, to_res_def_id, **kwargs):  # noqa: E501
        """delete_connection  # noqa: E501

        Deletes a connection between two entities (group or activity) for a resource type (indicated by its `resourceDefId`). ResourceDefs are the `inputs` and `outputs` of the process activity (step) which correspond to the resource type being disconnected. The `resourceDefId` for a group is the exported `resourceDefId` of the activity where the resource type exists. Both entities being disconnected must be at the same level unless removing an exported connection between an inner entity and its parent. When removing an exported connection the `resourceDefId` will be the same for both `toResDefId` and `fromResDefId`. If the entities are not at the top level for the process, the `parentId` of the entities must be defined. The connection will be deleted from the connections object of the enclosing group or the process.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connection_with_http_info(id, from_res_def_id, to_res_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :param str from_res_def_id: The `_id` of the `output` on the activity for the resource type the connection will be removed from. This activity may be within the group being disconnected. The `fromResDefId` must always be on the output of the connection being removed. (required)
        :param str to_res_def_id: The `_id` of the `input` on the activity for the resource type the connection will be removed from.  This activity may be within the group being disconnected. The `toResDefId` must always be on the input of the connection being removed. (required)
        :param str parent_id: The id of the parent group of both entities. If both entities are not at the toplevel for the process, the `parentId` for the entities must be included. When removing an exported connection the parent is the group enclosing the entity with the exported `resourceDefId`.
        :return: SuccessfullyDelete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'from_res_def_id', 'to_res_def_id', 'parent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_connection`")  # noqa: E501
        # verify the required parameter 'from_res_def_id' is set
        if ('from_res_def_id' not in params or
                params['from_res_def_id'] is None):
            raise ValueError("Missing the required parameter `from_res_def_id` when calling `delete_connection`")  # noqa: E501
        # verify the required parameter 'to_res_def_id' is set
        if ('to_res_def_id' not in params or
                params['to_res_def_id'] is None):
            raise ValueError("Missing the required parameter `to_res_def_id` when calling `delete_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'from_res_def_id' in params:
            path_params['fromResDefId'] = params['from_res_def_id']  # noqa: E501

        query_params = []
        if 'to_res_def_id' in params:
            query_params.append(('toResDefId', params['to_res_def_id']))  # noqa: E501
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/connection/{fromResDefId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessfullyDelete',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_group(self, id, group_id, **kwargs):  # noqa: E501
        """delete_group  # noqa: E501

        Deletes the specific group from the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_group(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str group_id: The `_id` of the group. (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
            return data

    def delete_group_with_http_info(self, id, group_id, **kwargs):  # noqa: E501
        """delete_group  # noqa: E501

        Deletes the specific group from the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_group_with_http_info(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str group_id: The `_id` of the group. (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/group/{groupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_process(self, id, **kwargs):  # noqa: E501
        """delete_process  # noqa: E501

        Performs a 'soft delete' on an existing process. Deleted processes will be marked as purged and remain in the database for 7 days, after which they will then be permanently deleted. During those 7 days the process will still be accessible through the api by searching for `_id` on `getProcess` endpoint or with the query parameter `deleted` on`listProcesses` endpoint. Associated experiments will also be 'soft deleted' for 7 days before being removed. To preserve associated experiments beyond the permanent deletion of the process, use the `purgeExperiments` query parameter. Remaining experiments may not work as expected once the process is purged.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_process(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :param bool purge_experiments: Defaults to `true`. Set to `false` to prevent the experiments associated with the process from being deleted.
        :return: SuccessfullyDelete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_process_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_process_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_process_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_process  # noqa: E501

        Performs a 'soft delete' on an existing process. Deleted processes will be marked as purged and remain in the database for 7 days, after which they will then be permanently deleted. During those 7 days the process will still be accessible through the api by searching for `_id` on `getProcess` endpoint or with the query parameter `deleted` on`listProcesses` endpoint. Associated experiments will also be 'soft deleted' for 7 days before being removed. To preserve associated experiments beyond the permanent deletion of the process, use the `purgeExperiments` query parameter. Remaining experiments may not work as expected once the process is purged.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_process_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :param bool purge_experiments: Defaults to `true`. Set to `false` to prevent the experiments associated with the process from being deleted.
        :return: SuccessfullyDelete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'purge_experiments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'purge_experiments' in params:
            query_params.append(('purgeExperiments', params['purge_experiments']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessfullyDelete',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_process_comment(self, id, comment_id, **kwargs):  # noqa: E501
        """delete_process_comment  # noqa: E501

        Deletes the specific comment (or design notes) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_process_comment(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_process_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_process_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
            return data

    def delete_process_comment_with_http_info(self, id, comment_id, **kwargs):  # noqa: E501
        """delete_process_comment  # noqa: E501

        Deletes the specific comment (or design notes) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_process_comment_with_http_info(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_process_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_process_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `delete_process_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/comment/{commentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tag_from_process(self, id, tag_id, **kwargs):  # noqa: E501
        """delete_tag_from_process  # noqa: E501

        Removes a tag from an process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tag_from_process(id, tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str tag_id: The `_id` of the tag to be removed from the process. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tag_from_process_with_http_info(id, tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tag_from_process_with_http_info(id, tag_id, **kwargs)  # noqa: E501
            return data

    def delete_tag_from_process_with_http_info(self, id, tag_id, **kwargs):  # noqa: E501
        """delete_tag_from_process  # noqa: E501

        Removes a tag from an process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tag_from_process_with_http_info(id, tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str tag_id: The `_id` of the tag to be removed from the process. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tag_from_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_tag_from_process`")  # noqa: E501
        # verify the required parameter 'tag_id' is set
        if ('tag_id' not in params or
                params['tag_id'] is None):
            raise ValueError("Missing the required parameter `tag_id` when calling `delete_tag_from_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'tag_id' in params:
            path_params['tagId'] = params['tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/tag/{tagId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def duplicate_process(self, id, **kwargs):  # noqa: E501
        """duplicate_process  # noqa: E501

        Duplicates the specified process. A version can be passed in to duplicate a chosen version of the process. If no version is passed in, the latest saved version will be duplicated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.duplicate_process(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :param DuplicateProcess body: A JSON object containing the necessary properties to duplicate a process.
        :return: SuccessfullyCreation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.duplicate_process_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.duplicate_process_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def duplicate_process_with_http_info(self, id, **kwargs):  # noqa: E501
        """duplicate_process  # noqa: E501

        Duplicates the specified process. A version can be passed in to duplicate a chosen version of the process. If no version is passed in, the latest saved version will be duplicated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.duplicate_process_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :param DuplicateProcess body: A JSON object containing the necessary properties to duplicate a process.
        :return: SuccessfullyCreation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method duplicate_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `duplicate_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessfullyCreation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_to_enclosing_group(self, id, resource_def_id, **kwargs):  # noqa: E501
        """export_to_enclosing_group  # noqa: E501

        Exports a resourceType (indicated by its `resourceDefId`) from an activity or a group to the connections object of the enclosing group or process. This connects the inner entities to the enclosing group or process. The enclosing group can then be connected to other entities. Inner entities must be exported first starting with the activity with the `resourceDefId` being exported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_enclosing_group(id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the property type will be updated on. (required)
        :param EnclosingConnection body: A JSON object containing the necessary properties to export to enclosing group.
        :return: SuccessfullyExported
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_to_enclosing_group_with_http_info(id, resource_def_id, **kwargs)  # noqa: E501
        else:
            (data) = self.export_to_enclosing_group_with_http_info(id, resource_def_id, **kwargs)  # noqa: E501
            return data

    def export_to_enclosing_group_with_http_info(self, id, resource_def_id, **kwargs):  # noqa: E501
        """export_to_enclosing_group  # noqa: E501

        Exports a resourceType (indicated by its `resourceDefId`) from an activity or a group to the connections object of the enclosing group or process. This connects the inner entities to the enclosing group or process. The enclosing group can then be connected to other entities. Inner entities must be exported first starting with the activity with the `resourceDefId` being exported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_enclosing_group_with_http_info(id, resource_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :param str resource_def_id: The `_id` of the `input` or `output` on the activity for the resource type the property type will be updated on. (required)
        :param EnclosingConnection body: A JSON object containing the necessary properties to export to enclosing group.
        :return: SuccessfullyExported
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'resource_def_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_to_enclosing_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `export_to_enclosing_group`")  # noqa: E501
        # verify the required parameter 'resource_def_id' is set
        if ('resource_def_id' not in params or
                params['resource_def_id'] is None):
            raise ValueError("Missing the required parameter `resource_def_id` when calling `export_to_enclosing_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'resource_def_id' in params:
            path_params['resourceDefId'] = params['resource_def_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/connection/{resourceDefId}/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessfullyExported',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_group(self, id, group_id, **kwargs):  # noqa: E501
        """get_group  # noqa: E501

        Returns the specific group associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str group_id: The `_id` of the group. (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
            return data

    def get_group_with_http_info(self, id, group_id, **kwargs):  # noqa: E501
        """get_group  # noqa: E501

        Returns the specific group associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_with_http_info(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str group_id: The `_id` of the group. (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/group/{groupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_process(self, id, **kwargs):  # noqa: E501
        """get_process  # noqa: E501

        Returns the detail for the specified process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_process_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_process_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_process_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_process  # noqa: E501

        Returns the detail for the specified process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of the process. (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_process_comment(self, id, comment_id, **kwargs):  # noqa: E501
        """get_process_comment  # noqa: E501

        Returns the specific comment (or design notes) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_comment(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_process_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_process_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
            return data

    def get_process_comment_with_http_info(self, id, comment_id, **kwargs):  # noqa: E501
        """get_process_comment  # noqa: E501

        Returns the specific comment (or design notes) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_comment_with_http_info(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_process_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `get_process_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/comment/{commentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_process_version(self, id, version_label, **kwargs):  # noqa: E501
        """get_process_version  # noqa: E501

        Returns design details on the specified process and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_version(id, version_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str version_label: The `version.label` of the process. Should be in the format of `0.01` or `1.00`. (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_process_version_with_http_info(id, version_label, **kwargs)  # noqa: E501
        else:
            (data) = self.get_process_version_with_http_info(id, version_label, **kwargs)  # noqa: E501
            return data

    def get_process_version_with_http_info(self, id, version_label, **kwargs):  # noqa: E501
        """get_process_version  # noqa: E501

        Returns design details on the specified process and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_version_with_http_info(id, version_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str version_label: The `version.label` of the process. Should be in the format of `0.01` or `1.00`. (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'version_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_process_version`")  # noqa: E501
        # verify the required parameter 'version_label' is set
        if ('version_label' not in params or
                params['version_label'] is None):
            raise ValueError("Missing the required parameter `version_label` when calling `get_process_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'version_label' in params:
            path_params['versionLabel'] = params['version_label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/version/{versionLabel}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role_for_process(self, id, user_id, **kwargs):  # noqa: E501
        """get_role_for_process  # noqa: E501

        Returns the highest role for the specified user for the specific process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_for_process(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str user_id: The `_id` of the user. (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_for_process_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_for_process_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def get_role_for_process_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """get_role_for_process  # noqa: E501

        Returns the highest role for the specified user for the specific process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_for_process_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str user_id: The `_id` of the user. (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role_for_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_role_for_process`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_role_for_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/role/{userId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upload_config(self, id, upload_config_id, **kwargs):  # noqa: E501
        """get_upload_config  # noqa: E501

        Returns the details for the selected upload configuration (or parseConfig).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_upload_config(id, upload_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str upload_config_id: The `_id` of the upload configuration. (required)
        :return: UploadConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_upload_config_with_http_info(id, upload_config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_upload_config_with_http_info(id, upload_config_id, **kwargs)  # noqa: E501
            return data

    def get_upload_config_with_http_info(self, id, upload_config_id, **kwargs):  # noqa: E501
        """get_upload_config  # noqa: E501

        Returns the details for the selected upload configuration (or parseConfig).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_upload_config_with_http_info(id, upload_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str upload_config_id: The `_id` of the upload configuration. (required)
        :return: UploadConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'upload_config_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upload_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_upload_config`")  # noqa: E501
        # verify the required parameter 'upload_config_id' is set
        if ('upload_config_id' not in params or
                params['upload_config_id'] is None):
            raise ValueError("Missing the required parameter `upload_config_id` when calling `get_upload_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'upload_config_id' in params:
            path_params['uploadConfigId'] = params['upload_config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/upload-config/{uploadConfigId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upload_config_collection(self, id, collection_id, **kwargs):  # noqa: E501
        """get_upload_config_collection  # noqa: E501

        Returns the details for the selected upload configuration collection (or collection of parseConfigs).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_upload_config_collection(id, collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str collection_id: The `_id` of the upload configuration collection. (required)
        :return: UploadConfigCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_upload_config_collection_with_http_info(id, collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_upload_config_collection_with_http_info(id, collection_id, **kwargs)  # noqa: E501
            return data

    def get_upload_config_collection_with_http_info(self, id, collection_id, **kwargs):  # noqa: E501
        """get_upload_config_collection  # noqa: E501

        Returns the details for the selected upload configuration collection (or collection of parseConfigs).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_upload_config_collection_with_http_info(id, collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str collection_id: The `_id` of the upload configuration collection. (required)
        :return: UploadConfigCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upload_config_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_upload_config_collection`")  # noqa: E501
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params or
                params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `get_upload_config_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'collection_id' in params:
            path_params['collectionId'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/upload-config-collection/{collectionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadConfigCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_groups(self, id, **kwargs):  # noqa: E501
        """list_groups  # noqa: E501

        List or search the groups associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash(`-`). A comma separated list may be used to sort by more than one field (e.g. `name,-label`). 
        :param str version: Limits the result set to the specified version label
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param bool public: Toggles the result set between public and private data. Default value is `false`
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """list_groups  # noqa: E501

        List or search the groups associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash(`-`). A comma separated list may be used to sort by more than one field (e.g. `name,-label`). 
        :param str version: Limits the result set to the specified version label
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param bool public: Toggles the result set between public and private data. Default value is `false`
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort', 'version', 'limit', 'offset', 'before', 'after', 'fields', 'name', 'creator', 'public']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501
        if 'public' in params:
            query_params.append(('public', params['public']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Groups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_process_comments(self, id, **kwargs):  # noqa: E501
        """list_process_comments  # noqa: E501

        Lists the comments (or design notes) associated with a process. Includes experiment, activity, and group comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_comments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: Limits the result set to items associated with the `_id` of the specified activity. Refers to the Process level Activity `_id`.
        :param str group_id: Limits the result set to items associated with the `_id` of the specified group. The process `_id` is the `topGroupId`.
        :param str experiment_id: Limits the result set to items associated with the `_id` of the specified experiment.
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Comments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_process_comments_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_process_comments_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_process_comments_with_http_info(self, id, **kwargs):  # noqa: E501
        """list_process_comments  # noqa: E501

        Lists the comments (or design notes) associated with a process. Includes experiment, activity, and group comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_comments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str activity_id: Limits the result set to items associated with the `_id` of the specified activity. Refers to the Process level Activity `_id`.
        :param str group_id: Limits the result set to items associated with the `_id` of the specified group. The process `_id` is the `topGroupId`.
        :param str experiment_id: Limits the result set to items associated with the `_id` of the specified experiment.
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Comments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'activity_id', 'group_id', 'experiment_id', 'limit', 'offset', 'before', 'after', 'modified_before', 'modified_after', 'fields', 'creator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_process_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_process_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'activity_id' in params:
            query_params.append(('activityId', params['activity_id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'experiment_id' in params:
            query_params.append(('experimentId', params['experiment_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'modified_before' in params:
            query_params.append(('modified_before', params['modified_before']))  # noqa: E501
        if 'modified_after' in params:
            query_params.append(('modified_after', params['modified_after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_process_tags(self, id, **kwargs):  # noqa: E501
        """list_process_tags  # noqa: E501

        Returns the tags for the specified process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_tags(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_process_tags_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_process_tags_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_process_tags_with_http_info(self, id, **kwargs):  # noqa: E501
        """list_process_tags  # noqa: E501

        Returns the tags for the specified process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_tags_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'limit', 'offset', 'before', 'after', 'modified_before', 'modified_after', 'fields', 'creator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_process_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_process_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'modified_before' in params:
            query_params.append(('modified_before', params['modified_before']))  # noqa: E501
        if 'modified_after' in params:
            query_params.append(('modified_after', params['modified_after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_process_versions(self, id, **kwargs):  # noqa: E501
        """list_process_versions  # noqa: E501

        Returns design details for all the versions of the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_versions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_process_versions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_process_versions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_process_versions_with_http_info(self, id, **kwargs):  # noqa: E501
        """list_process_versions  # noqa: E501

        Returns design details for all the versions of the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_versions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_process_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_process_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_processes(self, **kwargs):  # noqa: E501
        """list_processes  # noqa: E501

        List or search the user's processes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_processes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash(`-`). A comma separated list may be used to sort by more than one field (e.g. `name,-label`). 
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param bool public: Toggles the result set between public and private data. Default value is `false`
        :param bool deleted: Limits the results to deleted items, excludes them, or returns both deleted and non-deleted items if set to `all `. Default value       is `false`, to only show non-deleted items. 
        :return: Processes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_processes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_processes_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_processes_with_http_info(self, **kwargs):  # noqa: E501
        """list_processes  # noqa: E501

        List or search the user's processes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_processes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] sort: The sort order to use for the result set. To sort in descending order, prefix the field name with a dash(`-`). A comma separated list may be used to sort by more than one field (e.g. `name,-label`). 
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str name: Limits the result set to items with this exact name (case insensitive).
        :param str creator: Limits the result set to items created by the user with this username.
        :param bool public: Toggles the result set between public and private data. Default value is `false`
        :param bool deleted: Limits the results to deleted items, excludes them, or returns both deleted and non-deleted items if set to `all `. Default value       is `false`, to only show non-deleted items. 
        :return: Processes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'limit', 'offset', 'before', 'after', 'fields', 'name', 'creator', 'public', 'deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_processes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501
        if 'public' in params:
            query_params.append(('public', params['public']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/processes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Processes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_replies_to_process_comment(self, id, comment_id, **kwargs):  # noqa: E501
        """list_replies_to_process_comment  # noqa: E501

        Lists replies to a specific comment (or design notes) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_replies_to_process_comment(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Comments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_replies_to_process_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_replies_to_process_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
            return data

    def list_replies_to_process_comment_with_http_info(self, id, comment_id, **kwargs):  # noqa: E501
        """list_replies_to_process_comment  # noqa: E501

        Lists replies to a specific comment (or design notes) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_replies_to_process_comment_with_http_info(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :param int limit: Limits the number of records returned to the given value. Maximum value is `1000`. Default value is `100` 
        :param int offset: The number of records to skip from the beginning of the result set. If the offset value provided is greater than the number of available records, an empty result set will be returned. 
        :param str before: Limits the result set to items created on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). Used to prevent subsequent pages of results from including records that were created       since the first page of results was loaded. 
        :param str after: Limits the result set to items created on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z`). 
        :param str modified_before: Limits the result set to items modified on, or before, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str modified_after: Limits the result set to items modified on, or after, the specified timestamp (for example ISO, `2017-10-10T15:53:48.998Z` or epoch, `1507650828`). 
        :param str fields: Modifies the result set to exclude or include the specified fields. E.g: To return only the the name and created fields use `fields=name,created`. To exclude the name and created fields from the results use `fields=-name,-created`. Inclusion and exclusion options can not be set in the same query. 
        :param str creator: Limits the result set to items created by the user with this username.
        :return: Comments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'comment_id', 'limit', 'offset', 'before', 'after', 'modified_before', 'modified_after', 'fields', 'creator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_replies_to_process_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_replies_to_process_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `list_replies_to_process_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'modified_before' in params:
            query_params.append(('modified_before', params['modified_before']))  # noqa: E501
        if 'modified_after' in params:
            query_params.append(('modified_after', params['modified_after']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/comment/{commentId}/replies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_upload_config_collections(self, id, **kwargs):  # noqa: E501
        """list_upload_config_collections  # noqa: E501

        Lists all collections of upload configurations (or parseConfigs) on the process. The upload configs of a collection may not all apply to the same activityId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_upload_config_collections(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :return: UploadConfigCollections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_upload_config_collections_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_upload_config_collections_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_upload_config_collections_with_http_info(self, id, **kwargs):  # noqa: E501
        """list_upload_config_collections  # noqa: E501

        Lists all collections of upload configurations (or parseConfigs) on the process. The upload configs of a collection may not all apply to the same activityId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_upload_config_collections_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :return: UploadConfigCollections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_upload_config_collections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_upload_config_collections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/upload-config-collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadConfigCollections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_upload_configs(self, id, **kwargs):  # noqa: E501
        """list_upload_configs  # noqa: E501

        Lists the upload configurations (or parseConfigs) on the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_upload_configs(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :return: UploadConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_upload_configs_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_upload_configs_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_upload_configs_with_http_info(self, id, **kwargs):  # noqa: E501
        """list_upload_configs  # noqa: E501

        Lists the upload configurations (or parseConfigs) on the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_upload_configs_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The `_id` of process. (required)
        :return: UploadConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_upload_configs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_upload_configs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/upload-configs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadConfigs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reply_to_process_comment(self, body, id, comment_id, **kwargs):  # noqa: E501
        """reply_to_process_comment  # noqa: E501

        Replies to a specific comment (or design notes) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reply_to_process_comment(body, id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentMessageBody body: A JSON object containing the necessary properties to reply to a comment. (required)
        :param str id: The `_id` of process. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: CommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reply_to_process_comment_with_http_info(body, id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reply_to_process_comment_with_http_info(body, id, comment_id, **kwargs)  # noqa: E501
            return data

    def reply_to_process_comment_with_http_info(self, body, id, comment_id, **kwargs):  # noqa: E501
        """reply_to_process_comment  # noqa: E501

        Replies to a specific comment (or design notes) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reply_to_process_comment_with_http_info(body, id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentMessageBody body: A JSON object containing the necessary properties to reply to a comment. (required)
        :param str id: The `_id` of process. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: CommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reply_to_process_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `reply_to_process_comment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `reply_to_process_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `reply_to_process_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/comment/{commentId}/reply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def share_process(self, body, id, **kwargs):  # noqa: E501
        """share_process  # noqa: E501

        Share an existing process with a user, team, or organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.share_process(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShareProcessBody body: A JSON object containing the necessary properties to share the process. (required)
        :param str id: The `_id` of process. (required)
        :return: SuccessShared
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.share_process_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.share_process_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def share_process_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """share_process  # noqa: E501

        Share an existing process with a user, team, or organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.share_process_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShareProcessBody body: A JSON object containing the necessary properties to share the process. (required)
        :param str id: The `_id` of process. (required)
        :return: SuccessShared
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method share_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `share_process`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `share_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/accessible-to', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessShared',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unshare_process(self, body, id, principal_id, **kwargs):  # noqa: E501
        """unshare_process  # noqa: E501

        Revoke access to an existing proces from a user, team, or organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unshare_process(body, id, principal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnshareProcessBody body: A JSON object containing the necessary properties to revoke access to the process. (required)
        :param str id: The `_id` of the process to be revoked access to (required)
        :param str principal_id: The `_id` of the entity being revoked access to the process. (required)
        :return: SuccessfullyUnshared
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unshare_process_with_http_info(body, id, principal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unshare_process_with_http_info(body, id, principal_id, **kwargs)  # noqa: E501
            return data

    def unshare_process_with_http_info(self, body, id, principal_id, **kwargs):  # noqa: E501
        """unshare_process  # noqa: E501

        Revoke access to an existing proces from a user, team, or organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unshare_process_with_http_info(body, id, principal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnshareProcessBody body: A JSON object containing the necessary properties to revoke access to the process. (required)
        :param str id: The `_id` of the process to be revoked access to (required)
        :param str principal_id: The `_id` of the entity being revoked access to the process. (required)
        :return: SuccessfullyUnshared
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'principal_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unshare_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `unshare_process`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `unshare_process`")  # noqa: E501
        # verify the required parameter 'principal_id' is set
        if ('principal_id' not in params or
                params['principal_id'] is None):
            raise ValueError("Missing the required parameter `principal_id` when calling `unshare_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'principal_id' in params:
            path_params['principalId'] = params['principal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/accessible-to/{principalId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessfullyUnshared',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_group(self, body, id, group_id, **kwargs):  # noqa: E501
        """update_group  # noqa: E501

        Updates the specific group associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group(body, id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateGroupBody body: A JSON object containing the necessary properties to update a group. (required)
        :param str id: The `_id` of process. (required)
        :param str group_id: The `_id` of the group. (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_group_with_http_info(body, id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_group_with_http_info(body, id, group_id, **kwargs)  # noqa: E501
            return data

    def update_group_with_http_info(self, body, id, group_id, **kwargs):  # noqa: E501
        """update_group  # noqa: E501

        Updates the specific group associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group_with_http_info(body, id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateGroupBody body: A JSON object containing the necessary properties to update a group. (required)
        :param str id: The `_id` of process. (required)
        :param str group_id: The `_id` of the group. (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_group`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `update_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/group/{groupId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_process(self, body, id, **kwargs):  # noqa: E501
        """update_process  # noqa: E501

        Updates the specific process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_process(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateProcess body: A JSON object containing the necessary properties to update a process. (required)
        :param str id: The `_id` of the process. (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_process_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_process_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_process_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """update_process  # noqa: E501

        Updates the specific process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_process_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateProcess body: A JSON object containing the necessary properties to update a process. (required)
        :param str id: The `_id` of the process. (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_process`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_process_comment(self, body, id, comment_id, **kwargs):  # noqa: E501
        """update_process_comment  # noqa: E501

        Updates the specific comment (or design notes) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_process_comment(body, id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentMessageBody body: A JSON object containing the necessary properties to create a new comment (or observation). (required)
        :param str id: The `_id` of process. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_process_comment_with_http_info(body, id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_process_comment_with_http_info(body, id, comment_id, **kwargs)  # noqa: E501
            return data

    def update_process_comment_with_http_info(self, body, id, comment_id, **kwargs):  # noqa: E501
        """update_process_comment  # noqa: E501

        Updates the specific comment (or design notes) associated with a process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_process_comment_with_http_info(body, id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommentMessageBody body: A JSON object containing the necessary properties to create a new comment (or observation). (required)
        :param str id: The `_id` of process. (required)
        :param str comment_id: The `_id` of the comment. (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_process_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_process_comment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_process_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `update_process_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/process/{id}/comment/{commentId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PropagateRunsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'list[str]',
        'run_ids': 'list[str]',
        'direction': 'str',
        'upstream_run_group_id': 'str',
        'downstream_run_group_id': 'str'
    }

    attribute_map = {
        'path': 'path',
        'run_ids': 'runIds',
        'direction': 'direction',
        'upstream_run_group_id': 'upstreamRunGroupId',
        'downstream_run_group_id': 'downstreamRunGroupId'
    }

    def __init__(self, path=None, run_ids=None, direction=None, upstream_run_group_id=None, downstream_run_group_id=None):  # noqa: E501
        """PropagateRunsBody - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._run_ids = None
        self._direction = None
        self._upstream_run_group_id = None
        self._downstream_run_group_id = None
        self.discriminator = None
        self.path = path
        self.run_ids = run_ids
        if direction is not None:
            self.direction = direction
        if upstream_run_group_id is not None:
            self.upstream_run_group_id = upstream_run_group_id
        if downstream_run_group_id is not None:
            self.downstream_run_group_id = downstream_run_group_id

    @property
    def path(self):
        """Gets the path of this PropagateRunsBody.  # noqa: E501

        A valid `activitiesOrder` array from one of the the `v1/experiment/{id}/run-paths?start={startActivityId}&end={endActivityId}` response items. This is an array of activity `_id`s, in order, between the start and end activities (steps). Run-paths requires a start and stop activity ids in the query. The array will be validated against the same list that's generated by the `v1/experiment/{id}/run-paths` response, to ensure the path is available. Must have at least 2 activities.   # noqa: E501

        :return: The path of this PropagateRunsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PropagateRunsBody.

        A valid `activitiesOrder` array from one of the the `v1/experiment/{id}/run-paths?start={startActivityId}&end={endActivityId}` response items. This is an array of activity `_id`s, in order, between the start and end activities (steps). Run-paths requires a start and stop activity ids in the query. The array will be validated against the same list that's generated by the `v1/experiment/{id}/run-paths` response, to ensure the path is available. Must have at least 2 activities.   # noqa: E501

        :param path: The path of this PropagateRunsBody.  # noqa: E501
        :type: list[str]
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def run_ids(self):
        """Gets the run_ids of this PropagateRunsBody.  # noqa: E501

        An array of Run `_id`s from the starting activity (step) that you want to propagate. `v1/experiment/{id}/run-group/{id}/runs`   # noqa: E501

        :return: The run_ids of this PropagateRunsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._run_ids

    @run_ids.setter
    def run_ids(self, run_ids):
        """Sets the run_ids of this PropagateRunsBody.

        An array of Run `_id`s from the starting activity (step) that you want to propagate. `v1/experiment/{id}/run-group/{id}/runs`   # noqa: E501

        :param run_ids: The run_ids of this PropagateRunsBody.  # noqa: E501
        :type: list[str]
        """
        if run_ids is None:
            raise ValueError("Invalid value for `run_ids`, must not be `None`")  # noqa: E501

        self._run_ids = run_ids

    @property
    def direction(self):
        """Gets the direction of this PropagateRunsBody.  # noqa: E501

        Indicates the direction the runs should be propagated. Only `downstream` is available, at this time.  # noqa: E501

        :return: The direction of this PropagateRunsBody.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this PropagateRunsBody.

        Indicates the direction the runs should be propagated. Only `downstream` is available, at this time.  # noqa: E501

        :param direction: The direction of this PropagateRunsBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["downstream"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def upstream_run_group_id(self):
        """Gets the upstream_run_group_id of this PropagateRunsBody.  # noqa: E501

        The `_id` of the upstream run group that the `runIds` belong to. If not provided uses default run group.  # noqa: E501

        :return: The upstream_run_group_id of this PropagateRunsBody.  # noqa: E501
        :rtype: str
        """
        return self._upstream_run_group_id

    @upstream_run_group_id.setter
    def upstream_run_group_id(self, upstream_run_group_id):
        """Sets the upstream_run_group_id of this PropagateRunsBody.

        The `_id` of the upstream run group that the `runIds` belong to. If not provided uses default run group.  # noqa: E501

        :param upstream_run_group_id: The upstream_run_group_id of this PropagateRunsBody.  # noqa: E501
        :type: str
        """

        self._upstream_run_group_id = upstream_run_group_id

    @property
    def downstream_run_group_id(self):
        """Gets the downstream_run_group_id of this PropagateRunsBody.  # noqa: E501

        The `_id` of the downstream run group that you'd like to propagate the runs to. Use the `/v1/experiment/{id}/run-groups?activity={activityId}` endpoint to get the list of run groups for the downstream activity (step), the last value of the `path`. If not provided uses default run group.   # noqa: E501

        :return: The downstream_run_group_id of this PropagateRunsBody.  # noqa: E501
        :rtype: str
        """
        return self._downstream_run_group_id

    @downstream_run_group_id.setter
    def downstream_run_group_id(self, downstream_run_group_id):
        """Sets the downstream_run_group_id of this PropagateRunsBody.

        The `_id` of the downstream run group that you'd like to propagate the runs to. Use the `/v1/experiment/{id}/run-groups?activity={activityId}` endpoint to get the list of run groups for the downstream activity (step), the last value of the `path`. If not provided uses default run group.   # noqa: E501

        :param downstream_run_group_id: The downstream_run_group_id of this PropagateRunsBody.  # noqa: E501
        :type: str
        """

        self._downstream_run_group_id = downstream_run_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropagateRunsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropagateRunsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

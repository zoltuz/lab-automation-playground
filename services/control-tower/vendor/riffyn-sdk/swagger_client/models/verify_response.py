# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VerifyResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'user_id': 'str',
        'status': 'str',
        'api_key': 'str',
        'api_key_name': 'str',
        'message': 'str',
        'access_token': 'str',
        'access_token_expires_at': 'str'
    }

    attribute_map = {
        'username': 'username',
        'user_id': 'userId',
        'status': 'status',
        'api_key': 'apiKey',
        'api_key_name': 'apiKeyName',
        'message': 'message',
        'access_token': 'accessToken',
        'access_token_expires_at': 'accessTokenExpiresAt'
    }

    def __init__(self, username=None, user_id=None, status=None, api_key=None, api_key_name=None, message=None, access_token=None, access_token_expires_at=None):  # noqa: E501
        """VerifyResponse - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._user_id = None
        self._status = None
        self._api_key = None
        self._api_key_name = None
        self._message = None
        self._access_token = None
        self._access_token_expires_at = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if user_id is not None:
            self.user_id = user_id
        if status is not None:
            self.status = status
        if api_key is not None:
            self.api_key = api_key
        if api_key_name is not None:
            self.api_key_name = api_key_name
        if message is not None:
            self.message = message
        if access_token is not None:
            self.access_token = access_token
        if access_token_expires_at is not None:
            self.access_token_expires_at = access_token_expires_at

    @property
    def username(self):
        """Gets the username of this VerifyResponse.  # noqa: E501

        The `username` of the user.  # noqa: E501

        :return: The username of this VerifyResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this VerifyResponse.

        The `username` of the user.  # noqa: E501

        :param username: The username of this VerifyResponse.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def user_id(self):
        """Gets the user_id of this VerifyResponse.  # noqa: E501

        The `userId` of the user.  # noqa: E501

        :return: The user_id of this VerifyResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this VerifyResponse.

        The `userId` of the user.  # noqa: E501

        :param user_id: The user_id of this VerifyResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def status(self):
        """Gets the status of this VerifyResponse.  # noqa: E501

        The status of the authentication request. Will be one of `MFA_REQUIRED` or `SUCCESS`. `MFA_REQUIRED` means that MultiFactor Authentication is activated for the account. A `passCode` and `stateToken` along with a `factorId` must be sent via the `verify` endpoint to complete the authentication process.  # noqa: E501

        :return: The status of this VerifyResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VerifyResponse.

        The status of the authentication request. Will be one of `MFA_REQUIRED` or `SUCCESS`. `MFA_REQUIRED` means that MultiFactor Authentication is activated for the account. A `passCode` and `stateToken` along with a `factorId` must be sent via the `verify` endpoint to complete the authentication process.  # noqa: E501

        :param status: The status of this VerifyResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def api_key(self):
        """Gets the api_key of this VerifyResponse.  # noqa: E501

        An API key, which can be used to access any of the endpoints that support apiKey authentication. The API key will only be displayed once. To generate a new API key go to Riffyn Application and revoke the key in the `Security Settings` interface. This field will not appear if an api-key exists for this user.  # noqa: E501

        :return: The api_key of this VerifyResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this VerifyResponse.

        An API key, which can be used to access any of the endpoints that support apiKey authentication. The API key will only be displayed once. To generate a new API key go to Riffyn Application and revoke the key in the `Security Settings` interface. This field will not appear if an api-key exists for this user.  # noqa: E501

        :param api_key: The api_key of this VerifyResponse.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def api_key_name(self):
        """Gets the api_key_name of this VerifyResponse.  # noqa: E501

        The default name for the api-key that was generated. The default `name` for this key will be `loginKey`. To rename the key use the `updateApiKey` endpoint. This field will not appear if an api-key exists for this user.  # noqa: E501

        :return: The api_key_name of this VerifyResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_key_name

    @api_key_name.setter
    def api_key_name(self, api_key_name):
        """Sets the api_key_name of this VerifyResponse.

        The default name for the api-key that was generated. The default `name` for this key will be `loginKey`. To rename the key use the `updateApiKey` endpoint. This field will not appear if an api-key exists for this user.  # noqa: E501

        :param api_key_name: The api_key_name of this VerifyResponse.  # noqa: E501
        :type: str
        """

        self._api_key_name = api_key_name

    @property
    def message(self):
        """Gets the message of this VerifyResponse.  # noqa: E501

        A message regarding the API key.  # noqa: E501

        :return: The message of this VerifyResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this VerifyResponse.

        A message regarding the API key.  # noqa: E501

        :param message: The message of this VerifyResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def access_token(self):
        """Gets the access_token of this VerifyResponse.  # noqa: E501

        An access token, which can be used to access any of the endpoints that don't require `basic authentication`. The `access-token` can be used for the same endpoints as `api-key`. This access token will expire 30 minutes from generation.  # noqa: E501

        :return: The access_token of this VerifyResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this VerifyResponse.

        An access token, which can be used to access any of the endpoints that don't require `basic authentication`. The `access-token` can be used for the same endpoints as `api-key`. This access token will expire 30 minutes from generation.  # noqa: E501

        :param access_token: The access_token of this VerifyResponse.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def access_token_expires_at(self):
        """Gets the access_token_expires_at of this VerifyResponse.  # noqa: E501

        The date and time the `accessToken` will expire. The accessToken is set to expire 30 minutes from generation.  # noqa: E501

        :return: The access_token_expires_at of this VerifyResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_token_expires_at

    @access_token_expires_at.setter
    def access_token_expires_at(self, access_token_expires_at):
        """Sets the access_token_expires_at of this VerifyResponse.

        The date and time the `accessToken` will expire. The accessToken is set to expire 30 minutes from generation.  # noqa: E501

        :param access_token_expires_at: The access_token_expires_at of this VerifyResponse.  # noqa: E501
        :type: str
        """

        self._access_token_expires_at = access_token_expires_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerifyResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerifyResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

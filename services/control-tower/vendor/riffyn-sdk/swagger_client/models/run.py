# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Run(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'activity_id': 'str',
        'activity_version': 'str',
        'experiment_id': 'str',
        'group_id': 'str',
        'overrides_map': 'object',
        'status': 'str',
        'inputs': 'list[RunResourceDef]',
        'outputs': 'list[RunResourceDef]',
        'type': 'str',
        'num': 'int',
        'propagated_from_runs': 'list[str]',
        'creator': 'str',
        'created': 'Created',
        'label': 'str',
        'modified': 'datetime'
    }

    attribute_map = {
        'id': '_id',
        'name': 'name',
        'description': 'description',
        'activity_id': 'activityId',
        'activity_version': 'activityVersion',
        'experiment_id': 'experimentId',
        'group_id': 'groupId',
        'overrides_map': 'overridesMap',
        'status': 'status',
        'inputs': 'inputs',
        'outputs': 'outputs',
        'type': 'type',
        'num': 'num',
        'propagated_from_runs': 'propagatedFromRuns',
        'creator': 'creator',
        'created': 'created',
        'label': 'label',
        'modified': 'modified'
    }

    def __init__(self, id=None, name=None, description=None, activity_id=None, activity_version=None, experiment_id=None, group_id=None, overrides_map=None, status=None, inputs=None, outputs=None, type=None, num=None, propagated_from_runs=None, creator=None, created=None, label=None, modified=None):  # noqa: E501
        """Run - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._activity_id = None
        self._activity_version = None
        self._experiment_id = None
        self._group_id = None
        self._overrides_map = None
        self._status = None
        self._inputs = None
        self._outputs = None
        self._type = None
        self._num = None
        self._propagated_from_runs = None
        self._creator = None
        self._created = None
        self._label = None
        self._modified = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if activity_id is not None:
            self.activity_id = activity_id
        if activity_version is not None:
            self.activity_version = activity_version
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if group_id is not None:
            self.group_id = group_id
        if overrides_map is not None:
            self.overrides_map = overrides_map
        if status is not None:
            self.status = status
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs
        if type is not None:
            self.type = type
        if num is not None:
            self.num = num
        if propagated_from_runs is not None:
            self.propagated_from_runs = propagated_from_runs
        if creator is not None:
            self.creator = creator
        if created is not None:
            self.created = created
        if label is not None:
            self.label = label
        if modified is not None:
            self.modified = modified

    @property
    def id(self):
        """Gets the id of this Run.  # noqa: E501

        The unique ID of the run  # noqa: E501

        :return: The id of this Run.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Run.

        The unique ID of the run  # noqa: E501

        :param id: The id of this Run.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Run.  # noqa: E501

        The name of the item  # noqa: E501

        :return: The name of this Run.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Run.

        The name of the item  # noqa: E501

        :param name: The name of this Run.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Run.  # noqa: E501

        A brief description of the run  # noqa: E501

        :return: The description of this Run.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Run.

        A brief description of the run  # noqa: E501

        :param description: The description of this Run.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def activity_id(self):
        """Gets the activity_id of this Run.  # noqa: E501

        The activity (step) ID this run is associated with. Refers to the Process level Activity `_id`.  # noqa: E501

        :return: The activity_id of this Run.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this Run.

        The activity (step) ID this run is associated with. Refers to the Process level Activity `_id`.  # noqa: E501

        :param activity_id: The activity_id of this Run.  # noqa: E501
        :type: str
        """

        self._activity_id = activity_id

    @property
    def activity_version(self):
        """Gets the activity_version of this Run.  # noqa: E501

        The version of the activity (step) this run is associated with  # noqa: E501

        :return: The activity_version of this Run.  # noqa: E501
        :rtype: str
        """
        return self._activity_version

    @activity_version.setter
    def activity_version(self, activity_version):
        """Sets the activity_version of this Run.

        The version of the activity (step) this run is associated with  # noqa: E501

        :param activity_version: The activity_version of this Run.  # noqa: E501
        :type: str
        """

        self._activity_version = activity_version

    @property
    def experiment_id(self):
        """Gets the experiment_id of this Run.  # noqa: E501

        The experiment ID this run is associated with  # noqa: E501

        :return: The experiment_id of this Run.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this Run.

        The experiment ID this run is associated with  # noqa: E501

        :param experiment_id: The experiment_id of this Run.  # noqa: E501
        :type: str
        """

        self._experiment_id = experiment_id

    @property
    def group_id(self):
        """Gets the group_id of this Run.  # noqa: E501

        The run group ID this run is associated with  # noqa: E501

        :return: The group_id of this Run.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Run.

        The run group ID this run is associated with  # noqa: E501

        :param group_id: The group_id of this Run.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def overrides_map(self):
        """Gets the overrides_map of this Run.  # noqa: E501

        An object that assigns an override value to property for this run. The keys for this object are a hash of `activityId | resourceDefId | componentId | propertyTypeId`, and the value for the object is the value you want to assign for the property specified in the hash  example  {   \"RS2vW87PNg33T4HTQ |EnGj979ADGJJZSPMF | null | concentration\": \"1\" }   # noqa: E501

        :return: The overrides_map of this Run.  # noqa: E501
        :rtype: object
        """
        return self._overrides_map

    @overrides_map.setter
    def overrides_map(self, overrides_map):
        """Sets the overrides_map of this Run.

        An object that assigns an override value to property for this run. The keys for this object are a hash of `activityId | resourceDefId | componentId | propertyTypeId`, and the value for the object is the value you want to assign for the property specified in the hash  example  {   \"RS2vW87PNg33T4HTQ |EnGj979ADGJJZSPMF | null | concentration\": \"1\" }   # noqa: E501

        :param overrides_map: The overrides_map of this Run.  # noqa: E501
        :type: object
        """

        self._overrides_map = overrides_map

    @property
    def status(self):
        """Gets the status of this Run.  # noqa: E501

        The status of the run. Possible values are `new`, `running`, `stopped`, `completed`, `deleted`  # noqa: E501

        :return: The status of this Run.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Run.

        The status of the run. Possible values are `new`, `running`, `stopped`, `completed`, `deleted`  # noqa: E501

        :param status: The status of this Run.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def inputs(self):
        """Gets the inputs of this Run.  # noqa: E501

        A list of input resources for the run  # noqa: E501

        :return: The inputs of this Run.  # noqa: E501
        :rtype: list[RunResourceDef]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this Run.

        A list of input resources for the run  # noqa: E501

        :param inputs: The inputs of this Run.  # noqa: E501
        :type: list[RunResourceDef]
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this Run.  # noqa: E501

        A list of output resources for the run  # noqa: E501

        :return: The outputs of this Run.  # noqa: E501
        :rtype: list[RunResourceDef]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this Run.

        A list of output resources for the run  # noqa: E501

        :param outputs: The outputs of this Run.  # noqa: E501
        :type: list[RunResourceDef]
        """

        self._outputs = outputs

    @property
    def type(self):
        """Gets the type of this Run.  # noqa: E501

        The type of this run. Allowed values are `blank`, `calibration`, `reference`, `sample`, `standard`, `trial`  # noqa: E501

        :return: The type of this Run.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Run.

        The type of this run. Allowed values are `blank`, `calibration`, `reference`, `sample`, `standard`, `trial`  # noqa: E501

        :param type: The type of this Run.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def num(self):
        """Gets the num of this Run.  # noqa: E501

        A numerical representation of the run number. Can be used for sorting.  # noqa: E501

        :return: The num of this Run.  # noqa: E501
        :rtype: int
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this Run.

        A numerical representation of the run number. Can be used for sorting.  # noqa: E501

        :param num: The num of this Run.  # noqa: E501
        :type: int
        """

        self._num = num

    @property
    def propagated_from_runs(self):
        """Gets the propagated_from_runs of this Run.  # noqa: E501

        The list of upstream runs that feed resources into this run.  # noqa: E501

        :return: The propagated_from_runs of this Run.  # noqa: E501
        :rtype: list[str]
        """
        return self._propagated_from_runs

    @propagated_from_runs.setter
    def propagated_from_runs(self, propagated_from_runs):
        """Sets the propagated_from_runs of this Run.

        The list of upstream runs that feed resources into this run.  # noqa: E501

        :param propagated_from_runs: The propagated_from_runs of this Run.  # noqa: E501
        :type: list[str]
        """

        self._propagated_from_runs = propagated_from_runs

    @property
    def creator(self):
        """Gets the creator of this Run.  # noqa: E501

        The username of the user that created this run group  # noqa: E501

        :return: The creator of this Run.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Run.

        The username of the user that created this run group  # noqa: E501

        :param creator: The creator of this Run.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def created(self):
        """Gets the created of this Run.  # noqa: E501


        :return: The created of this Run.  # noqa: E501
        :rtype: Created
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Run.


        :param created: The created of this Run.  # noqa: E501
        :type: Created
        """

        self._created = created

    @property
    def label(self):
        """Gets the label of this Run.  # noqa: E501


        :return: The label of this Run.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Run.


        :param label: The label of this Run.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def modified(self):
        """Gets the modified of this Run.  # noqa: E501

        The last modified date of the run.  # noqa: E501

        :return: The modified of this Run.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Run.

        The last modified date of the run.  # noqa: E501

        :param modified: The modified of this Run.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Run, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Run):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SetResourceBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_id': 'str',
        'run_ids': 'list[str]',
        'resource_def_id': 'str',
        'resource_id': 'str',
        'name': 'str',
        'type_id': 'str'
    }

    attribute_map = {
        'activity_id': 'activityId',
        'run_ids': 'runIds',
        'resource_def_id': 'resourceDefId',
        'resource_id': 'resourceId',
        'name': 'name',
        'type_id': 'typeId'
    }

    def __init__(self, activity_id=None, run_ids=None, resource_def_id=None, resource_id=None, name=None, type_id=None):  # noqa: E501
        """SetResourceBody - a model defined in Swagger"""  # noqa: E501
        self._activity_id = None
        self._run_ids = None
        self._resource_def_id = None
        self._resource_id = None
        self._name = None
        self._type_id = None
        self.discriminator = None
        self.activity_id = activity_id
        self.run_ids = run_ids
        self.resource_def_id = resource_def_id
        self.resource_id = resource_id
        self.name = name
        self.type_id = type_id

    @property
    def activity_id(self):
        """Gets the activity_id of this SetResourceBody.  # noqa: E501

        The `_id` of the activity (step) that you would like to assign the resource to. Refers to the Process level Activity `_id`. Use this option if you want to apply the resource to all runs in an activity for the specified experiment. Use one of `activityId` or `runIds`, they are mutually exclusive.  # noqa: E501

        :return: The activity_id of this SetResourceBody.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this SetResourceBody.

        The `_id` of the activity (step) that you would like to assign the resource to. Refers to the Process level Activity `_id`. Use this option if you want to apply the resource to all runs in an activity for the specified experiment. Use one of `activityId` or `runIds`, they are mutually exclusive.  # noqa: E501

        :param activity_id: The activity_id of this SetResourceBody.  # noqa: E501
        :type: str
        """
        if activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")  # noqa: E501

        self._activity_id = activity_id

    @property
    def run_ids(self):
        """Gets the run_ids of this SetResourceBody.  # noqa: E501

        The array of `_id`s from the runs you would like to assign the resource to. Use this option if you want to assign the resource to a subset of runs. Use one of `activityId` or `runIds`, they are mutually exclusive.  # noqa: E501

        :return: The run_ids of this SetResourceBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._run_ids

    @run_ids.setter
    def run_ids(self, run_ids):
        """Sets the run_ids of this SetResourceBody.

        The array of `_id`s from the runs you would like to assign the resource to. Use this option if you want to assign the resource to a subset of runs. Use one of `activityId` or `runIds`, they are mutually exclusive.  # noqa: E501

        :param run_ids: The run_ids of this SetResourceBody.  # noqa: E501
        :type: list[str]
        """
        if run_ids is None:
            raise ValueError("Invalid value for `run_ids`, must not be `None`")  # noqa: E501

        self._run_ids = run_ids

    @property
    def resource_def_id(self):
        """Gets the resource_def_id of this SetResourceBody.  # noqa: E501

        The `_id` of the input resource type from the `inputs` array from the `listExperimentActivities` endpoint. Defines the specific use of the resource in an experiment.  # noqa: E501

        :return: The resource_def_id of this SetResourceBody.  # noqa: E501
        :rtype: str
        """
        return self._resource_def_id

    @resource_def_id.setter
    def resource_def_id(self, resource_def_id):
        """Sets the resource_def_id of this SetResourceBody.

        The `_id` of the input resource type from the `inputs` array from the `listExperimentActivities` endpoint. Defines the specific use of the resource in an experiment.  # noqa: E501

        :param resource_def_id: The resource_def_id of this SetResourceBody.  # noqa: E501
        :type: str
        """
        if resource_def_id is None:
            raise ValueError("Invalid value for `resource_def_id`, must not be `None`")  # noqa: E501

        self._resource_def_id = resource_def_id

    @property
    def resource_id(self):
        """Gets the resource_id of this SetResourceBody.  # noqa: E501

        The `_id` of the resource inventory item you would like to assign. Define either a `name` or a `resourceId`.   # noqa: E501

        :return: The resource_id of this SetResourceBody.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this SetResourceBody.

        The `_id` of the resource inventory item you would like to assign. Define either a `name` or a `resourceId`.   # noqa: E501

        :param resource_id: The resource_id of this SetResourceBody.  # noqa: E501
        :type: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def name(self):
        """Gets the name of this SetResourceBody.  # noqa: E501

        The `name` of the resource you would like to assign. If the `name` does not correspond to a unique resource from the resource library it will define a place holder with no `resourceId`. Use only `runIds` when using `name`. Define either a `name` or a `resourceId`.  # noqa: E501

        :return: The name of this SetResourceBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SetResourceBody.

        The `name` of the resource you would like to assign. If the `name` does not correspond to a unique resource from the resource library it will define a place holder with no `resourceId`. Use only `runIds` when using `name`. Define either a `name` or a `resourceId`.  # noqa: E501

        :param name: The name of this SetResourceBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type_id(self):
        """Gets the type_id of this SetResourceBody.  # noqa: E501

        The `resourceType` for the resource being assigned.  # noqa: E501

        :return: The type_id of this SetResourceBody.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this SetResourceBody.

        The `resourceType` for the resource being assigned.  # noqa: E501

        :param type_id: The type_id of this SetResourceBody.  # noqa: E501
        :type: str
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetResourceBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetResourceBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

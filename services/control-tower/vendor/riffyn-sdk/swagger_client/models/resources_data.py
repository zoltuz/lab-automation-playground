# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ResourcesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type_id': 'str',
        'type_name': 'str',
        'id': 'str',
        'name': 'str',
        'label': 'str',
        'description': 'str',
        'experiment_id': 'str',
        'experiment_name': 'str',
        'top_group_id': 'str',
        'top_group_name': 'str',
        'activity_id': 'str',
        'activity_name': 'str',
        'run_id': 'str',
        'run_label': 'str',
        'genealogy': 'object',
        'components': 'list[ResourcesComponents]',
        'sharable': 'bool',
        'accessible_to': 'AccessibleTo',
        'public': 'bool',
        'permissions': 'int',
        'creator': 'str',
        'created': 'Created',
        'org': 'Org',
        'modified': 'datetime',
        'modified_by': 'ModifiedBy'
    }

    attribute_map = {
        'type_id': 'typeId',
        'type_name': 'typeName',
        'id': '_id',
        'name': 'name',
        'label': 'label',
        'description': 'description',
        'experiment_id': 'experimentId',
        'experiment_name': 'experimentName',
        'top_group_id': 'topGroupId',
        'top_group_name': 'topGroupName',
        'activity_id': 'activityId',
        'activity_name': 'activityName',
        'run_id': 'runId',
        'run_label': 'runLabel',
        'genealogy': 'genealogy',
        'components': 'components',
        'sharable': 'sharable',
        'accessible_to': 'accessibleTo',
        'public': 'public',
        'permissions': 'permissions',
        'creator': 'creator',
        'created': 'created',
        'org': 'org',
        'modified': 'modified',
        'modified_by': 'modifiedBy'
    }

    def __init__(self, type_id=None, type_name=None, id=None, name=None, label=None, description=None, experiment_id=None, experiment_name=None, top_group_id=None, top_group_name=None, activity_id=None, activity_name=None, run_id=None, run_label=None, genealogy=None, components=None, sharable=None, accessible_to=None, public=None, permissions=None, creator=None, created=None, org=None, modified=None, modified_by=None):  # noqa: E501
        """ResourcesData - a model defined in Swagger"""  # noqa: E501
        self._type_id = None
        self._type_name = None
        self._id = None
        self._name = None
        self._label = None
        self._description = None
        self._experiment_id = None
        self._experiment_name = None
        self._top_group_id = None
        self._top_group_name = None
        self._activity_id = None
        self._activity_name = None
        self._run_id = None
        self._run_label = None
        self._genealogy = None
        self._components = None
        self._sharable = None
        self._accessible_to = None
        self._public = None
        self._permissions = None
        self._creator = None
        self._created = None
        self._org = None
        self._modified = None
        self._modified_by = None
        self.discriminator = None
        if type_id is not None:
            self.type_id = type_id
        if type_name is not None:
            self.type_name = type_name
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if experiment_name is not None:
            self.experiment_name = experiment_name
        if top_group_id is not None:
            self.top_group_id = top_group_id
        if top_group_name is not None:
            self.top_group_name = top_group_name
        if activity_id is not None:
            self.activity_id = activity_id
        if activity_name is not None:
            self.activity_name = activity_name
        if run_id is not None:
            self.run_id = run_id
        if run_label is not None:
            self.run_label = run_label
        if genealogy is not None:
            self.genealogy = genealogy
        if components is not None:
            self.components = components
        if sharable is not None:
            self.sharable = sharable
        if accessible_to is not None:
            self.accessible_to = accessible_to
        if public is not None:
            self.public = public
        if permissions is not None:
            self.permissions = permissions
        if creator is not None:
            self.creator = creator
        if created is not None:
            self.created = created
        if org is not None:
            self.org = org
        if modified is not None:
            self.modified = modified
        if modified_by is not None:
            self.modified_by = modified_by

    @property
    def type_id(self):
        """Gets the type_id of this ResourcesData.  # noqa: E501

        The `_id` of the ResourceType for this resource.  # noqa: E501

        :return: The type_id of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this ResourcesData.

        The `_id` of the ResourceType for this resource.  # noqa: E501

        :param type_id: The type_id of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    @property
    def type_name(self):
        """Gets the type_name of this ResourcesData.  # noqa: E501

        The `name` of the ResourceType for this resource.  # noqa: E501

        :return: The type_name of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this ResourcesData.

        The `name` of the ResourceType for this resource.  # noqa: E501

        :param type_name: The type_name of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def id(self):
        """Gets the id of this ResourcesData.  # noqa: E501

        The unique id of the resource.  # noqa: E501

        :return: The id of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourcesData.

        The unique id of the resource.  # noqa: E501

        :param id: The id of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ResourcesData.  # noqa: E501

        The name of the item.  # noqa: E501

        :return: The name of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourcesData.

        The name of the item.  # noqa: E501

        :param name: The name of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def label(self):
        """Gets the label of this ResourcesData.  # noqa: E501

        The label for this resource, typically in the format of `GR-` or `IR-` followed by the resource's `_id`.  # noqa: E501

        :return: The label of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ResourcesData.

        The label for this resource, typically in the format of `GR-` or `IR-` followed by the resource's `_id`.  # noqa: E501

        :param label: The label of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this ResourcesData.  # noqa: E501

        A description of what the resource is, or where this resource was created.  # noqa: E501

        :return: The description of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResourcesData.

        A description of what the resource is, or where this resource was created.  # noqa: E501

        :param description: The description of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def experiment_id(self):
        """Gets the experiment_id of this ResourcesData.  # noqa: E501

        The `_id` of the Experiment where this resource was created.  # noqa: E501

        :return: The experiment_id of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this ResourcesData.

        The `_id` of the Experiment where this resource was created.  # noqa: E501

        :param experiment_id: The experiment_id of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._experiment_id = experiment_id

    @property
    def experiment_name(self):
        """Gets the experiment_name of this ResourcesData.  # noqa: E501

        The name of the Experiment where this resource was created.  # noqa: E501

        :return: The experiment_name of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._experiment_name

    @experiment_name.setter
    def experiment_name(self, experiment_name):
        """Sets the experiment_name of this ResourcesData.

        The name of the Experiment where this resource was created.  # noqa: E501

        :param experiment_name: The experiment_name of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._experiment_name = experiment_name

    @property
    def top_group_id(self):
        """Gets the top_group_id of this ResourcesData.  # noqa: E501

        The unique id of the process  # noqa: E501

        :return: The top_group_id of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._top_group_id

    @top_group_id.setter
    def top_group_id(self, top_group_id):
        """Sets the top_group_id of this ResourcesData.

        The unique id of the process  # noqa: E501

        :param top_group_id: The top_group_id of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._top_group_id = top_group_id

    @property
    def top_group_name(self):
        """Gets the top_group_name of this ResourcesData.  # noqa: E501

        The name of the process  # noqa: E501

        :return: The top_group_name of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._top_group_name

    @top_group_name.setter
    def top_group_name(self, top_group_name):
        """Sets the top_group_name of this ResourcesData.

        The name of the process  # noqa: E501

        :param top_group_name: The top_group_name of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._top_group_name = top_group_name

    @property
    def activity_id(self):
        """Gets the activity_id of this ResourcesData.  # noqa: E501

        The `_id` of the activity (step).  # noqa: E501

        :return: The activity_id of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this ResourcesData.

        The `_id` of the activity (step).  # noqa: E501

        :param activity_id: The activity_id of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._activity_id = activity_id

    @property
    def activity_name(self):
        """Gets the activity_name of this ResourcesData.  # noqa: E501

        The name of the activity (step).  # noqa: E501

        :return: The activity_name of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._activity_name

    @activity_name.setter
    def activity_name(self, activity_name):
        """Sets the activity_name of this ResourcesData.

        The name of the activity (step).  # noqa: E501

        :param activity_name: The activity_name of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._activity_name = activity_name

    @property
    def run_id(self):
        """Gets the run_id of this ResourcesData.  # noqa: E501

        The `_id` of the Run where this resource was created.  # noqa: E501

        :return: The run_id of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this ResourcesData.

        The `_id` of the Run where this resource was created.  # noqa: E501

        :param run_id: The run_id of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def run_label(self):
        """Gets the run_label of this ResourcesData.  # noqa: E501

        A label that includes the activity id, experiment number, step number, and run number for this resource.  # noqa: E501

        :return: The run_label of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._run_label

    @run_label.setter
    def run_label(self, run_label):
        """Sets the run_label of this ResourcesData.

        A label that includes the activity id, experiment number, step number, and run number for this resource.  # noqa: E501

        :param run_label: The run_label of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._run_label = run_label

    @property
    def genealogy(self):
        """Gets the genealogy of this ResourcesData.  # noqa: E501


        :return: The genealogy of this ResourcesData.  # noqa: E501
        :rtype: object
        """
        return self._genealogy

    @genealogy.setter
    def genealogy(self, genealogy):
        """Sets the genealogy of this ResourcesData.


        :param genealogy: The genealogy of this ResourcesData.  # noqa: E501
        :type: object
        """

        self._genealogy = genealogy

    @property
    def components(self):
        """Gets the components of this ResourcesData.  # noqa: E501

        A list of components and their fixed properties for this resource.  # noqa: E501

        :return: The components of this ResourcesData.  # noqa: E501
        :rtype: list[ResourcesComponents]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this ResourcesData.

        A list of components and their fixed properties for this resource.  # noqa: E501

        :param components: The components of this ResourcesData.  # noqa: E501
        :type: list[ResourcesComponents]
        """

        self._components = components

    @property
    def sharable(self):
        """Gets the sharable of this ResourcesData.  # noqa: E501

        Indicates if the resource can be shared with other users.  # noqa: E501

        :return: The sharable of this ResourcesData.  # noqa: E501
        :rtype: bool
        """
        return self._sharable

    @sharable.setter
    def sharable(self, sharable):
        """Sets the sharable of this ResourcesData.

        Indicates if the resource can be shared with other users.  # noqa: E501

        :param sharable: The sharable of this ResourcesData.  # noqa: E501
        :type: bool
        """

        self._sharable = sharable

    @property
    def accessible_to(self):
        """Gets the accessible_to of this ResourcesData.  # noqa: E501


        :return: The accessible_to of this ResourcesData.  # noqa: E501
        :rtype: AccessibleTo
        """
        return self._accessible_to

    @accessible_to.setter
    def accessible_to(self, accessible_to):
        """Sets the accessible_to of this ResourcesData.


        :param accessible_to: The accessible_to of this ResourcesData.  # noqa: E501
        :type: AccessibleTo
        """

        self._accessible_to = accessible_to

    @property
    def public(self):
        """Gets the public of this ResourcesData.  # noqa: E501

        Indicates if the resource is visible to all users.  # noqa: E501

        :return: The public of this ResourcesData.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ResourcesData.

        Indicates if the resource is visible to all users.  # noqa: E501

        :param public: The public of this ResourcesData.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def permissions(self):
        """Gets the permissions of this ResourcesData.  # noqa: E501

        The permission level of the entity.  # noqa: E501

        :return: The permissions of this ResourcesData.  # noqa: E501
        :rtype: int
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ResourcesData.

        The permission level of the entity.  # noqa: E501

        :param permissions: The permissions of this ResourcesData.  # noqa: E501
        :type: int
        """

        self._permissions = permissions

    @property
    def creator(self):
        """Gets the creator of this ResourcesData.  # noqa: E501

        The `username` of the user that created this resource.  # noqa: E501

        :return: The creator of this ResourcesData.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this ResourcesData.

        The `username` of the user that created this resource.  # noqa: E501

        :param creator: The creator of this ResourcesData.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def created(self):
        """Gets the created of this ResourcesData.  # noqa: E501


        :return: The created of this ResourcesData.  # noqa: E501
        :rtype: Created
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ResourcesData.


        :param created: The created of this ResourcesData.  # noqa: E501
        :type: Created
        """

        self._created = created

    @property
    def org(self):
        """Gets the org of this ResourcesData.  # noqa: E501


        :return: The org of this ResourcesData.  # noqa: E501
        :rtype: Org
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this ResourcesData.


        :param org: The org of this ResourcesData.  # noqa: E501
        :type: Org
        """

        self._org = org

    @property
    def modified(self):
        """Gets the modified of this ResourcesData.  # noqa: E501

        The last modified date of the resource.  # noqa: E501

        :return: The modified of this ResourcesData.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ResourcesData.

        The last modified date of the resource.  # noqa: E501

        :param modified: The modified of this ResourcesData.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def modified_by(self):
        """Gets the modified_by of this ResourcesData.  # noqa: E501


        :return: The modified_by of this ResourcesData.  # noqa: E501
        :rtype: ModifiedBy
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this ResourcesData.


        :param modified_by: The modified_by of this ResourcesData.  # noqa: E501
        :type: ModifiedBy
        """

        self._modified_by = modified_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourcesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourcesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

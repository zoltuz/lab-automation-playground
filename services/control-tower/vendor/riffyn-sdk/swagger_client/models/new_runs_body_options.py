# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NewRunsBodyOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_id': 'str',
        'activity_id': 'str',
        'activity_version': 'str',
        'type': 'str',
        'tags': 'list[str]',
        'intended_start': 'datetime',
        'intended_stop': 'datetime'
    }

    attribute_map = {
        'group_id': 'groupId',
        'activity_id': 'activityId',
        'activity_version': 'activityVersion',
        'type': 'type',
        'tags': 'tags',
        'intended_start': 'intendedStart',
        'intended_stop': 'intendedStop'
    }

    def __init__(self, group_id=None, activity_id=None, activity_version=None, type=None, tags=None, intended_start=None, intended_stop=None):  # noqa: E501
        """NewRunsBodyOptions - a model defined in Swagger"""  # noqa: E501
        self._group_id = None
        self._activity_id = None
        self._activity_version = None
        self._type = None
        self._tags = None
        self._intended_start = None
        self._intended_stop = None
        self.discriminator = None
        if group_id is not None:
            self.group_id = group_id
        if activity_id is not None:
            self.activity_id = activity_id
        if activity_version is not None:
            self.activity_version = activity_version
        if type is not None:
            self.type = type
        if tags is not None:
            self.tags = tags
        if intended_start is not None:
            self.intended_start = intended_start
        if intended_stop is not None:
            self.intended_stop = intended_stop

    @property
    def group_id(self):
        """Gets the group_id of this NewRunsBodyOptions.  # noqa: E501

        The run group in which you would like to create the runs. `groupId` and `activityId` are mutually exclusive  # noqa: E501

        :return: The group_id of this NewRunsBodyOptions.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this NewRunsBodyOptions.

        The run group in which you would like to create the runs. `groupId` and `activityId` are mutually exclusive  # noqa: E501

        :param group_id: The group_id of this NewRunsBodyOptions.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def activity_id(self):
        """Gets the activity_id of this NewRunsBodyOptions.  # noqa: E501

        The _id of the activity (step) in which you would like to create the runs. Since no particular run group is specified, in this case, the new runs will be added to the default run group. `groupId` and `activityId` are mutually exclusive  # noqa: E501

        :return: The activity_id of this NewRunsBodyOptions.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this NewRunsBodyOptions.

        The _id of the activity (step) in which you would like to create the runs. Since no particular run group is specified, in this case, the new runs will be added to the default run group. `groupId` and `activityId` are mutually exclusive  # noqa: E501

        :param activity_id: The activity_id of this NewRunsBodyOptions.  # noqa: E501
        :type: str
        """

        self._activity_id = activity_id

    @property
    def activity_version(self):
        """Gets the activity_version of this NewRunsBodyOptions.  # noqa: E501

        The `version.label` of the activity you are adding runs to. An incorrect value will result in an error  # noqa: E501

        :return: The activity_version of this NewRunsBodyOptions.  # noqa: E501
        :rtype: str
        """
        return self._activity_version

    @activity_version.setter
    def activity_version(self, activity_version):
        """Sets the activity_version of this NewRunsBodyOptions.

        The `version.label` of the activity you are adding runs to. An incorrect value will result in an error  # noqa: E501

        :param activity_version: The activity_version of this NewRunsBodyOptions.  # noqa: E501
        :type: str
        """

        self._activity_version = activity_version

    @property
    def type(self):
        """Gets the type of this NewRunsBodyOptions.  # noqa: E501

        Allowed values are `blank`, `calibration`, `reference`, `sample`, `standard`, `trial`  # noqa: E501

        :return: The type of this NewRunsBodyOptions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewRunsBodyOptions.

        Allowed values are `blank`, `calibration`, `reference`, `sample`, `standard`, `trial`  # noqa: E501

        :param type: The type of this NewRunsBodyOptions.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def tags(self):
        """Gets the tags of this NewRunsBodyOptions.  # noqa: E501

        A simple string array of tags to assign to the newly created runs  # noqa: E501

        :return: The tags of this NewRunsBodyOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NewRunsBodyOptions.

        A simple string array of tags to assign to the newly created runs  # noqa: E501

        :param tags: The tags of this NewRunsBodyOptions.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def intended_start(self):
        """Gets the intended_start of this NewRunsBodyOptions.  # noqa: E501

        The intended start date-time of these runs. The specified value can be either an Epoch timestamp (number of seconds since 1970-01-01), or an ISO date string.  # noqa: E501

        :return: The intended_start of this NewRunsBodyOptions.  # noqa: E501
        :rtype: datetime
        """
        return self._intended_start

    @intended_start.setter
    def intended_start(self, intended_start):
        """Sets the intended_start of this NewRunsBodyOptions.

        The intended start date-time of these runs. The specified value can be either an Epoch timestamp (number of seconds since 1970-01-01), or an ISO date string.  # noqa: E501

        :param intended_start: The intended_start of this NewRunsBodyOptions.  # noqa: E501
        :type: datetime
        """

        self._intended_start = intended_start

    @property
    def intended_stop(self):
        """Gets the intended_stop of this NewRunsBodyOptions.  # noqa: E501

        The intended stop date-time of these runs. The specified value can be either an Epoch timestamp (number of seconds since 1970-01-01), or an ISO date string. Example: ISO: 2016-01-01T12:31:23.456Z or epoch: 1510879105.  # noqa: E501

        :return: The intended_stop of this NewRunsBodyOptions.  # noqa: E501
        :rtype: datetime
        """
        return self._intended_stop

    @intended_stop.setter
    def intended_stop(self, intended_stop):
        """Sets the intended_stop of this NewRunsBodyOptions.

        The intended stop date-time of these runs. The specified value can be either an Epoch timestamp (number of seconds since 1970-01-01), or an ISO date string. Example: ISO: 2016-01-01T12:31:23.456Z or epoch: 1510879105.  # noqa: E501

        :param intended_stop: The intended_stop of this NewRunsBodyOptions.  # noqa: E501
        :type: datetime
        """

        self._intended_stop = intended_stop

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewRunsBodyOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewRunsBodyOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

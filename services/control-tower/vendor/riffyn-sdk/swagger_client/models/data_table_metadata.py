# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DataTableMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_key': 'str',
        'display_name': 'str',
        'header': 'str',
        'level': 'str',
        'direction': 'str',
        'activity_id': 'str',
        'activity_name': 'str',
        'activity_version': 'str',
        'resource_name': 'str',
        'resource_def_id': 'str',
        'spec_type': 'str',
        'spec_attribute': 'str',
        'exported_data_type': 'str',
        'short_header': 'str',
        'sql_name': 'str',
        'unique_name': 'str'
    }

    attribute_map = {
        'column_key': 'columnKey',
        'display_name': 'displayName',
        'header': 'header',
        'level': 'level',
        'direction': 'direction',
        'activity_id': 'activityId',
        'activity_name': 'activityName',
        'activity_version': 'activityVersion',
        'resource_name': 'resourceName',
        'resource_def_id': 'resourceDefId',
        'spec_type': 'specType',
        'spec_attribute': 'specAttribute',
        'exported_data_type': 'exportedDataType',
        'short_header': 'shortHeader',
        'sql_name': 'sqlName',
        'unique_name': 'uniqueName'
    }

    def __init__(self, column_key=None, display_name=None, header=None, level=None, direction=None, activity_id=None, activity_name=None, activity_version=None, resource_name=None, resource_def_id=None, spec_type=None, spec_attribute=None, exported_data_type=None, short_header=None, sql_name=None, unique_name=None):  # noqa: E501
        """DataTableMetadata - a model defined in Swagger"""  # noqa: E501
        self._column_key = None
        self._display_name = None
        self._header = None
        self._level = None
        self._direction = None
        self._activity_id = None
        self._activity_name = None
        self._activity_version = None
        self._resource_name = None
        self._resource_def_id = None
        self._spec_type = None
        self._spec_attribute = None
        self._exported_data_type = None
        self._short_header = None
        self._sql_name = None
        self._unique_name = None
        self.discriminator = None
        if column_key is not None:
            self.column_key = column_key
        if display_name is not None:
            self.display_name = display_name
        if header is not None:
            self.header = header
        if level is not None:
            self.level = level
        if direction is not None:
            self.direction = direction
        if activity_id is not None:
            self.activity_id = activity_id
        if activity_name is not None:
            self.activity_name = activity_name
        if activity_version is not None:
            self.activity_version = activity_version
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_def_id is not None:
            self.resource_def_id = resource_def_id
        if spec_type is not None:
            self.spec_type = spec_type
        if spec_attribute is not None:
            self.spec_attribute = spec_attribute
        if exported_data_type is not None:
            self.exported_data_type = exported_data_type
        if short_header is not None:
            self.short_header = short_header
        if sql_name is not None:
            self.sql_name = sql_name
        if unique_name is not None:
            self.unique_name = unique_name

    @property
    def column_key(self):
        """Gets the column_key of this DataTableMetadata.  # noqa: E501

        A unique key that is assigned to this column. This key can be used to locate data for this column in the `datatables` array.  # noqa: E501

        :return: The column_key of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._column_key

    @column_key.setter
    def column_key(self, column_key):
        """Sets the column_key of this DataTableMetadata.

        A unique key that is assigned to this column. This key can be used to locate data for this column in the `datatables` array.  # noqa: E501

        :param column_key: The column_key of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._column_key = column_key

    @property
    def display_name(self):
        """Gets the display_name of this DataTableMetadata.  # noqa: E501


        :return: The display_name of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DataTableMetadata.


        :param display_name: The display_name of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def header(self):
        """Gets the header of this DataTableMetadata.  # noqa: E501

        The `header` field can be used to access a column in the `datatable` row.  # noqa: E501

        :return: The header of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this DataTableMetadata.

        The `header` field can be used to access a column in the `datatable` row.  # noqa: E501

        :param header: The header of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._header = header

    @property
    def level(self):
        """Gets the level of this DataTableMetadata.  # noqa: E501


        :return: The level of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this DataTableMetadata.


        :param level: The level of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def direction(self):
        """Gets the direction of this DataTableMetadata.  # noqa: E501

        If referring to a resource, indicates if it's an `input` or `output` resource  # noqa: E501

        :return: The direction of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this DataTableMetadata.

        If referring to a resource, indicates if it's an `input` or `output` resource  # noqa: E501

        :param direction: The direction of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def activity_id(self):
        """Gets the activity_id of this DataTableMetadata.  # noqa: E501

        The `_id` of the activity (step) the data belongs to. Refers to the Process level Activity `_id`.  # noqa: E501

        :return: The activity_id of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this DataTableMetadata.

        The `_id` of the activity (step) the data belongs to. Refers to the Process level Activity `_id`.  # noqa: E501

        :param activity_id: The activity_id of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._activity_id = activity_id

    @property
    def activity_name(self):
        """Gets the activity_name of this DataTableMetadata.  # noqa: E501

        The `name` of the activity (step) the data belongs to.  # noqa: E501

        :return: The activity_name of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._activity_name

    @activity_name.setter
    def activity_name(self, activity_name):
        """Sets the activity_name of this DataTableMetadata.

        The `name` of the activity (step) the data belongs to.  # noqa: E501

        :param activity_name: The activity_name of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._activity_name = activity_name

    @property
    def activity_version(self):
        """Gets the activity_version of this DataTableMetadata.  # noqa: E501

        The `version.label` of the activity (step) the data belongs to.  # noqa: E501

        :return: The activity_version of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._activity_version

    @activity_version.setter
    def activity_version(self, activity_version):
        """Sets the activity_version of this DataTableMetadata.

        The `version.label` of the activity (step) the data belongs to.  # noqa: E501

        :param activity_version: The activity_version of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._activity_version = activity_version

    @property
    def resource_name(self):
        """Gets the resource_name of this DataTableMetadata.  # noqa: E501

        The `name` of the resource the data belongs to.  # noqa: E501

        :return: The resource_name of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this DataTableMetadata.

        The `name` of the resource the data belongs to.  # noqa: E501

        :param resource_name: The resource_name of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_def_id(self):
        """Gets the resource_def_id of this DataTableMetadata.  # noqa: E501

        The `_id` of an `input` or `output` of the activity (step), linking the resource to the activity.  # noqa: E501

        :return: The resource_def_id of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._resource_def_id

    @resource_def_id.setter
    def resource_def_id(self, resource_def_id):
        """Sets the resource_def_id of this DataTableMetadata.

        The `_id` of an `input` or `output` of the activity (step), linking the resource to the activity.  # noqa: E501

        :param resource_def_id: The resource_def_id of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._resource_def_id = resource_def_id

    @property
    def spec_type(self):
        """Gets the spec_type of this DataTableMetadata.  # noqa: E501


        :return: The spec_type of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._spec_type

    @spec_type.setter
    def spec_type(self, spec_type):
        """Sets the spec_type of this DataTableMetadata.


        :param spec_type: The spec_type of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._spec_type = spec_type

    @property
    def spec_attribute(self):
        """Gets the spec_attribute of this DataTableMetadata.  # noqa: E501


        :return: The spec_attribute of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._spec_attribute

    @spec_attribute.setter
    def spec_attribute(self, spec_attribute):
        """Sets the spec_attribute of this DataTableMetadata.


        :param spec_attribute: The spec_attribute of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._spec_attribute = spec_attribute

    @property
    def exported_data_type(self):
        """Gets the exported_data_type of this DataTableMetadata.  # noqa: E501

        The dataType of the column in the parquet/datatable.  # noqa: E501

        :return: The exported_data_type of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._exported_data_type

    @exported_data_type.setter
    def exported_data_type(self, exported_data_type):
        """Sets the exported_data_type of this DataTableMetadata.

        The dataType of the column in the parquet/datatable.  # noqa: E501

        :param exported_data_type: The exported_data_type of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._exported_data_type = exported_data_type

    @property
    def short_header(self):
        """Gets the short_header of this DataTableMetadata.  # noqa: E501

        The shortened name of the column data table. This is a unique name based on the `header` attribute.  # noqa: E501

        :return: The short_header of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._short_header

    @short_header.setter
    def short_header(self, short_header):
        """Sets the short_header of this DataTableMetadata.

        The shortened name of the column data table. This is a unique name based on the `header` attribute.  # noqa: E501

        :param short_header: The short_header of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._short_header = short_header

    @property
    def sql_name(self):
        """Gets the sql_name of this DataTableMetadata.  # noqa: E501

        The name of the column when accessed via the SQL database. This name is the same as the `uniqueName` with pipe characters (\"|\") replaced with two underscores (\"__\") and spaces (\" \") replaced with one underscore (\"_\").  # noqa: E501

        :return: The sql_name of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._sql_name

    @sql_name.setter
    def sql_name(self, sql_name):
        """Sets the sql_name of this DataTableMetadata.

        The name of the column when accessed via the SQL database. This name is the same as the `uniqueName` with pipe characters (\"|\") replaced with two underscores (\"__\") and spaces (\" \") replaced with one underscore (\"_\").  # noqa: E501

        :param sql_name: The sql_name of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._sql_name = sql_name

    @property
    def unique_name(self):
        """Gets the unique_name of this DataTableMetadata.  # noqa: E501

        The unique name of the column. This is the same as the `displayName` with a numeric index added to columns with conflicting names.  # noqa: E501

        :return: The unique_name of this DataTableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this DataTableMetadata.

        The unique name of the column. This is the same as the `displayName` with a numeric index added to columns with conflicting names.  # noqa: E501

        :param unique_name: The unique_name of this DataTableMetadata.  # noqa: E501
        :type: str
        """

        self._unique_name = unique_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataTableMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataTableMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

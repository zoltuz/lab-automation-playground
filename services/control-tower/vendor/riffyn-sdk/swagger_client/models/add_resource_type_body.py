# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AddResourceTypeBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type_id': 'str',
        'direction': 'str',
        'sample': 'bool',
        'set_res_def_id_to': 'str'
    }

    attribute_map = {
        'resource_type_id': 'resourceTypeId',
        'direction': 'direction',
        'sample': 'sample',
        'set_res_def_id_to': 'setResDefIdTo'
    }

    def __init__(self, resource_type_id=None, direction=None, sample=None, set_res_def_id_to=None):  # noqa: E501
        """AddResourceTypeBody - a model defined in Swagger"""  # noqa: E501
        self._resource_type_id = None
        self._direction = None
        self._sample = None
        self._set_res_def_id_to = None
        self.discriminator = None
        self.resource_type_id = resource_type_id
        self.direction = direction
        if sample is not None:
            self.sample = sample
        if set_res_def_id_to is not None:
            self.set_res_def_id_to = set_res_def_id_to

    @property
    def resource_type_id(self):
        """Gets the resource_type_id of this AddResourceTypeBody.  # noqa: E501

        The `_id` of the resource type being added to the activity input or output.   # noqa: E501

        :return: The resource_type_id of this AddResourceTypeBody.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_id

    @resource_type_id.setter
    def resource_type_id(self, resource_type_id):
        """Sets the resource_type_id of this AddResourceTypeBody.

        The `_id` of the resource type being added to the activity input or output.   # noqa: E501

        :param resource_type_id: The resource_type_id of this AddResourceTypeBody.  # noqa: E501
        :type: str
        """
        if resource_type_id is None:
            raise ValueError("Invalid value for `resource_type_id`, must not be `None`")  # noqa: E501

        self._resource_type_id = resource_type_id

    @property
    def direction(self):
        """Gets the direction of this AddResourceTypeBody.  # noqa: E501

        The direction on the activity the resource type is being added to. This will be one of these direction: `input`, or `output`.   # noqa: E501

        :return: The direction of this AddResourceTypeBody.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this AddResourceTypeBody.

        The direction on the activity the resource type is being added to. This will be one of these direction: `input`, or `output`.   # noqa: E501

        :param direction: The direction of this AddResourceTypeBody.  # noqa: E501
        :type: str
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501

        self._direction = direction

    @property
    def sample(self):
        """Gets the sample of this AddResourceTypeBody.  # noqa: E501

        Creates a pass-through resource by default or if `sample` is set to false. If `true` marks the resource generated on output as a sample of the resource type, making it a unique resource with a unique generated name and id.   # noqa: E501

        :return: The sample of this AddResourceTypeBody.  # noqa: E501
        :rtype: bool
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this AddResourceTypeBody.

        Creates a pass-through resource by default or if `sample` is set to false. If `true` marks the resource generated on output as a sample of the resource type, making it a unique resource with a unique generated name and id.   # noqa: E501

        :param sample: The sample of this AddResourceTypeBody.  # noqa: E501
        :type: bool
        """

        self._sample = sample

    @property
    def set_res_def_id_to(self):
        """Gets the set_res_def_id_to of this AddResourceTypeBody.  # noqa: E501

        Sets the `resourceDefId` for the created `resourceType` on the step. Must be a valid `_id` from the `input` or `output` of an activity or returned from `addResourceTypeToExperiment` endpoint. This allows the `resourceDefId` created as an 'ad hoc' modification on an experiment to be added to the working version of the process. A `resourceDefId` must be unique in the process.   # noqa: E501

        :return: The set_res_def_id_to of this AddResourceTypeBody.  # noqa: E501
        :rtype: str
        """
        return self._set_res_def_id_to

    @set_res_def_id_to.setter
    def set_res_def_id_to(self, set_res_def_id_to):
        """Sets the set_res_def_id_to of this AddResourceTypeBody.

        Sets the `resourceDefId` for the created `resourceType` on the step. Must be a valid `_id` from the `input` or `output` of an activity or returned from `addResourceTypeToExperiment` endpoint. This allows the `resourceDefId` created as an 'ad hoc' modification on an experiment to be added to the working version of the process. A `resourceDefId` must be unique in the process.   # noqa: E501

        :param set_res_def_id_to: The set_res_def_id_to of this AddResourceTypeBody.  # noqa: E501
        :type: str
        """

        self._set_res_def_id_to = set_res_def_id_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddResourceTypeBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddResourceTypeBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

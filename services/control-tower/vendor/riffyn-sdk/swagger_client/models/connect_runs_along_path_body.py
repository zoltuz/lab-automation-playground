# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ConnectRunsAlongPathBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upstream_run_ids': 'list[str]',
        'downstream_run_ids': 'list[str]',
        'path': 'list[str]',
        'split_after': 'str',
        'ratio': 'list[int]'
    }

    attribute_map = {
        'upstream_run_ids': 'upstreamRunIds',
        'downstream_run_ids': 'downstreamRunIds',
        'path': 'path',
        'split_after': 'splitAfter',
        'ratio': 'ratio'
    }

    def __init__(self, upstream_run_ids=None, downstream_run_ids=None, path=None, split_after=None, ratio=None):  # noqa: E501
        """ConnectRunsAlongPathBody - a model defined in Swagger"""  # noqa: E501
        self._upstream_run_ids = None
        self._downstream_run_ids = None
        self._path = None
        self._split_after = None
        self._ratio = None
        self.discriminator = None
        if upstream_run_ids is not None:
            self.upstream_run_ids = upstream_run_ids
        if downstream_run_ids is not None:
            self.downstream_run_ids = downstream_run_ids
        if path is not None:
            self.path = path
        if split_after is not None:
            self.split_after = split_after
        if ratio is not None:
            self.ratio = ratio

    @property
    def upstream_run_ids(self):
        """Gets the upstream_run_ids of this ConnectRunsAlongPathBody.  # noqa: E501

        An array of run `_id`s from which you want to start the connection. These `_id`s must be from the first step in the `path` of activities. `upstreamRunIds` must be from the same `runGroup`.  # noqa: E501

        :return: The upstream_run_ids of this ConnectRunsAlongPathBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._upstream_run_ids

    @upstream_run_ids.setter
    def upstream_run_ids(self, upstream_run_ids):
        """Sets the upstream_run_ids of this ConnectRunsAlongPathBody.

        An array of run `_id`s from which you want to start the connection. These `_id`s must be from the first step in the `path` of activities. `upstreamRunIds` must be from the same `runGroup`.  # noqa: E501

        :param upstream_run_ids: The upstream_run_ids of this ConnectRunsAlongPathBody.  # noqa: E501
        :type: list[str]
        """

        self._upstream_run_ids = upstream_run_ids

    @property
    def downstream_run_ids(self):
        """Gets the downstream_run_ids of this ConnectRunsAlongPathBody.  # noqa: E501

        An array of run `_id`s to which you want to connect. These `_id`s must be from the last step of the `path` of activities.`downstreamRunIds` must be from the same `runGroup`.  # noqa: E501

        :return: The downstream_run_ids of this ConnectRunsAlongPathBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._downstream_run_ids

    @downstream_run_ids.setter
    def downstream_run_ids(self, downstream_run_ids):
        """Sets the downstream_run_ids of this ConnectRunsAlongPathBody.

        An array of run `_id`s to which you want to connect. These `_id`s must be from the last step of the `path` of activities.`downstreamRunIds` must be from the same `runGroup`.  # noqa: E501

        :param downstream_run_ids: The downstream_run_ids of this ConnectRunsAlongPathBody.  # noqa: E501
        :type: list[str]
        """

        self._downstream_run_ids = downstream_run_ids

    @property
    def path(self):
        """Gets the path of this ConnectRunsAlongPathBody.  # noqa: E501

        A valid `activitiesOrder` array from one of the `v1/experiment/{id}/run-paths?start={startActivityId}&end={endActivityId}` response items. This is an array of all the activity `_id`s, in step order, for the connecting runs. Refers to the process `activityId`. When using the experiment activities, use `objectId`.  # noqa: E501

        :return: The path of this ConnectRunsAlongPathBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ConnectRunsAlongPathBody.

        A valid `activitiesOrder` array from one of the `v1/experiment/{id}/run-paths?start={startActivityId}&end={endActivityId}` response items. This is an array of all the activity `_id`s, in step order, for the connecting runs. Refers to the process `activityId`. When using the experiment activities, use `objectId`.  # noqa: E501

        :param path: The path of this ConnectRunsAlongPathBody.  # noqa: E501
        :type: list[str]
        """

        self._path = path

    @property
    def split_after(self):
        """Gets the split_after of this ConnectRunsAlongPathBody.  # noqa: E501

        The `activityId` after which the split should happen. Must be a valid `activityId` from the path array.  # noqa: E501

        :return: The split_after of this ConnectRunsAlongPathBody.  # noqa: E501
        :rtype: str
        """
        return self._split_after

    @split_after.setter
    def split_after(self, split_after):
        """Sets the split_after of this ConnectRunsAlongPathBody.

        The `activityId` after which the split should happen. Must be a valid `activityId` from the path array.  # noqa: E501

        :param split_after: The split_after of this ConnectRunsAlongPathBody.  # noqa: E501
        :type: str
        """

        self._split_after = split_after

    @property
    def ratio(self):
        """Gets the ratio of this ConnectRunsAlongPathBody.  # noqa: E501

        The ratio of upstreamRunIds to downstreamRunIds such as [ 1, 2 ]. One of the integers must be a 1.  # noqa: E501

        :return: The ratio of this ConnectRunsAlongPathBody.  # noqa: E501
        :rtype: list[int]
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this ConnectRunsAlongPathBody.

        The ratio of upstreamRunIds to downstreamRunIds such as [ 1, 2 ]. One of the integers must be a 1.  # noqa: E501

        :param ratio: The ratio of this ConnectRunsAlongPathBody.  # noqa: E501
        :type: list[int]
        """

        self._ratio = ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectRunsAlongPathBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectRunsAlongPathBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RunGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'experiment_id': 'str',
        'activity_id': 'str',
        'activity_version': 'str',
        'num': 'int',
        'label': 'str',
        'default': 'bool',
        'creator': 'str',
        'created': 'Created'
    }

    attribute_map = {
        'id': '_id',
        'name': 'name',
        'description': 'description',
        'experiment_id': 'experimentId',
        'activity_id': 'activityId',
        'activity_version': 'activityVersion',
        'num': 'num',
        'label': 'label',
        'default': 'default',
        'creator': 'creator',
        'created': 'created'
    }

    def __init__(self, id=None, name=None, description=None, experiment_id=None, activity_id=None, activity_version=None, num=None, label=None, default=None, creator=None, created=None):  # noqa: E501
        """RunGroup - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._experiment_id = None
        self._activity_id = None
        self._activity_version = None
        self._num = None
        self._label = None
        self._default = None
        self._creator = None
        self._created = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if activity_id is not None:
            self.activity_id = activity_id
        if activity_version is not None:
            self.activity_version = activity_version
        if num is not None:
            self.num = num
        if label is not None:
            self.label = label
        if default is not None:
            self.default = default
        if creator is not None:
            self.creator = creator
        if created is not None:
            self.created = created

    @property
    def id(self):
        """Gets the id of this RunGroup.  # noqa: E501

        The unique id of the run group.  # noqa: E501

        :return: The id of this RunGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RunGroup.

        The unique id of the run group.  # noqa: E501

        :param id: The id of this RunGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RunGroup.  # noqa: E501

        The name of the item  # noqa: E501

        :return: The name of this RunGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RunGroup.

        The name of the item  # noqa: E501

        :param name: The name of this RunGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this RunGroup.  # noqa: E501

        A brief description of this run group.  # noqa: E501

        :return: The description of this RunGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RunGroup.

        A brief description of this run group.  # noqa: E501

        :param description: The description of this RunGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def experiment_id(self):
        """Gets the experiment_id of this RunGroup.  # noqa: E501

        The unique id of the experiment this run group is associated with.  # noqa: E501

        :return: The experiment_id of this RunGroup.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this RunGroup.

        The unique id of the experiment this run group is associated with.  # noqa: E501

        :param experiment_id: The experiment_id of this RunGroup.  # noqa: E501
        :type: str
        """

        self._experiment_id = experiment_id

    @property
    def activity_id(self):
        """Gets the activity_id of this RunGroup.  # noqa: E501

        The unique id of the activity (step) this run group is associated with. Refers to the Process level Activity `_id`.  # noqa: E501

        :return: The activity_id of this RunGroup.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this RunGroup.

        The unique id of the activity (step) this run group is associated with. Refers to the Process level Activity `_id`.  # noqa: E501

        :param activity_id: The activity_id of this RunGroup.  # noqa: E501
        :type: str
        """

        self._activity_id = activity_id

    @property
    def activity_version(self):
        """Gets the activity_version of this RunGroup.  # noqa: E501

        The version number of the activity this run group was created on.  # noqa: E501

        :return: The activity_version of this RunGroup.  # noqa: E501
        :rtype: str
        """
        return self._activity_version

    @activity_version.setter
    def activity_version(self, activity_version):
        """Sets the activity_version of this RunGroup.

        The version number of the activity this run group was created on.  # noqa: E501

        :param activity_version: The activity_version of this RunGroup.  # noqa: E501
        :type: str
        """

        self._activity_version = activity_version

    @property
    def num(self):
        """Gets the num of this RunGroup.  # noqa: E501

        A numeric value, used to represent the sort order of the groups within the activity (step) and experiment.  # noqa: E501

        :return: The num of this RunGroup.  # noqa: E501
        :rtype: int
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this RunGroup.

        A numeric value, used to represent the sort order of the groups within the activity (step) and experiment.  # noqa: E501

        :param num: The num of this RunGroup.  # noqa: E501
        :type: int
        """

        self._num = num

    @property
    def label(self):
        """Gets the label of this RunGroup.  # noqa: E501

        The label for the run group.  # noqa: E501

        :return: The label of this RunGroup.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RunGroup.

        The label for the run group.  # noqa: E501

        :param label: The label of this RunGroup.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def default(self):
        """Gets the default of this RunGroup.  # noqa: E501

        Indicates if this is the default run group for the activity and experiment.  # noqa: E501

        :return: The default of this RunGroup.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this RunGroup.

        Indicates if this is the default run group for the activity and experiment.  # noqa: E501

        :param default: The default of this RunGroup.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def creator(self):
        """Gets the creator of this RunGroup.  # noqa: E501

        The username of the user that created this run group.  # noqa: E501

        :return: The creator of this RunGroup.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this RunGroup.

        The username of the user that created this run group.  # noqa: E501

        :param creator: The creator of this RunGroup.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def created(self):
        """Gets the created of this RunGroup.  # noqa: E501


        :return: The created of this RunGroup.  # noqa: E501
        :rtype: Created
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RunGroup.


        :param created: The created of this RunGroup.  # noqa: E501
        :type: Created
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Experiment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'num': 'int',
        'label': 'str',
        'overrides': 'list[ExperimentOverrides]',
        'shareable': 'bool',
        'accessible_to': 'AccessibleTo',
        'public': 'bool',
        'modified_by': 'ModifiedBy',
        'modified': 'list[ExperimentModified]',
        'status': 'str',
        'compliant': 'str',
        'signers': 'list[str]',
        'top_group': 'TopGroup',
        'permissions': 'int',
        'creator': 'str',
        'created': 'Created',
        'org': 'Org',
        'linked_to': 'list[str]',
        'activity_order': 'list[str]',
        'description': 'str'
    }

    attribute_map = {
        'id': '_id',
        'name': 'name',
        'num': 'num',
        'label': 'label',
        'overrides': 'overrides',
        'shareable': 'shareable',
        'accessible_to': 'accessibleTo',
        'public': 'public',
        'modified_by': 'modifiedBy',
        'modified': 'modified',
        'status': 'status',
        'compliant': 'compliant',
        'signers': 'signers',
        'top_group': 'topGroup',
        'permissions': 'permissions',
        'creator': 'creator',
        'created': 'created',
        'org': 'org',
        'linked_to': 'linkedTo',
        'activity_order': 'activityOrder',
        'description': 'description'
    }

    def __init__(self, id=None, name=None, num=None, label=None, overrides=None, shareable=None, accessible_to=None, public=None, modified_by=None, modified=None, status=None, compliant=None, signers=None, top_group=None, permissions=None, creator=None, created=None, org=None, linked_to=None, activity_order=None, description=None):  # noqa: E501
        """Experiment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._num = None
        self._label = None
        self._overrides = None
        self._shareable = None
        self._accessible_to = None
        self._public = None
        self._modified_by = None
        self._modified = None
        self._status = None
        self._compliant = None
        self._signers = None
        self._top_group = None
        self._permissions = None
        self._creator = None
        self._created = None
        self._org = None
        self._linked_to = None
        self._activity_order = None
        self._description = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if num is not None:
            self.num = num
        if label is not None:
            self.label = label
        if overrides is not None:
            self.overrides = overrides
        if shareable is not None:
            self.shareable = shareable
        if accessible_to is not None:
            self.accessible_to = accessible_to
        if public is not None:
            self.public = public
        if modified_by is not None:
            self.modified_by = modified_by
        if modified is not None:
            self.modified = modified
        if status is not None:
            self.status = status
        if compliant is not None:
            self.compliant = compliant
        if signers is not None:
            self.signers = signers
        if top_group is not None:
            self.top_group = top_group
        if permissions is not None:
            self.permissions = permissions
        if creator is not None:
            self.creator = creator
        if created is not None:
            self.created = created
        if org is not None:
            self.org = org
        if linked_to is not None:
            self.linked_to = linked_to
        if activity_order is not None:
            self.activity_order = activity_order
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this Experiment.  # noqa: E501

        The unique id of the experiment.  # noqa: E501

        :return: The id of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Experiment.

        The unique id of the experiment.  # noqa: E501

        :param id: The id of this Experiment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Experiment.  # noqa: E501

        The name of the item.  # noqa: E501

        :return: The name of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Experiment.

        The name of the item.  # noqa: E501

        :param name: The name of this Experiment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num(self):
        """Gets the num of this Experiment.  # noqa: E501


        :return: The num of this Experiment.  # noqa: E501
        :rtype: int
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this Experiment.


        :param num: The num of this Experiment.  # noqa: E501
        :type: int
        """

        self._num = num

    @property
    def label(self):
        """Gets the label of this Experiment.  # noqa: E501


        :return: The label of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Experiment.


        :param label: The label of this Experiment.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def overrides(self):
        """Gets the overrides of this Experiment.  # noqa: E501


        :return: The overrides of this Experiment.  # noqa: E501
        :rtype: list[ExperimentOverrides]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this Experiment.


        :param overrides: The overrides of this Experiment.  # noqa: E501
        :type: list[ExperimentOverrides]
        """

        self._overrides = overrides

    @property
    def shareable(self):
        """Gets the shareable of this Experiment.  # noqa: E501

        Indicates if the experiment can be shared with other users.  # noqa: E501

        :return: The shareable of this Experiment.  # noqa: E501
        :rtype: bool
        """
        return self._shareable

    @shareable.setter
    def shareable(self, shareable):
        """Sets the shareable of this Experiment.

        Indicates if the experiment can be shared with other users.  # noqa: E501

        :param shareable: The shareable of this Experiment.  # noqa: E501
        :type: bool
        """

        self._shareable = shareable

    @property
    def accessible_to(self):
        """Gets the accessible_to of this Experiment.  # noqa: E501


        :return: The accessible_to of this Experiment.  # noqa: E501
        :rtype: AccessibleTo
        """
        return self._accessible_to

    @accessible_to.setter
    def accessible_to(self, accessible_to):
        """Sets the accessible_to of this Experiment.


        :param accessible_to: The accessible_to of this Experiment.  # noqa: E501
        :type: AccessibleTo
        """

        self._accessible_to = accessible_to

    @property
    def public(self):
        """Gets the public of this Experiment.  # noqa: E501

        Indicates if the experiment is visible to all users.  # noqa: E501

        :return: The public of this Experiment.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Experiment.

        Indicates if the experiment is visible to all users.  # noqa: E501

        :param public: The public of this Experiment.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def modified_by(self):
        """Gets the modified_by of this Experiment.  # noqa: E501


        :return: The modified_by of this Experiment.  # noqa: E501
        :rtype: ModifiedBy
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Experiment.


        :param modified_by: The modified_by of this Experiment.  # noqa: E501
        :type: ModifiedBy
        """

        self._modified_by = modified_by

    @property
    def modified(self):
        """Gets the modified of this Experiment.  # noqa: E501

        The last modified date of the experiment.  # noqa: E501

        :return: The modified of this Experiment.  # noqa: E501
        :rtype: list[ExperimentModified]
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Experiment.

        The last modified date of the experiment.  # noqa: E501

        :param modified: The modified of this Experiment.  # noqa: E501
        :type: list[ExperimentModified]
        """

        self._modified = modified

    @property
    def status(self):
        """Gets the status of this Experiment.  # noqa: E501

        The status of the electronic signature.  # noqa: E501

        :return: The status of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Experiment.

        The status of the electronic signature.  # noqa: E501

        :param status: The status of this Experiment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def compliant(self):
        """Gets the compliant of this Experiment.  # noqa: E501

        21CRF compliant.  # noqa: E501

        :return: The compliant of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._compliant

    @compliant.setter
    def compliant(self, compliant):
        """Sets the compliant of this Experiment.

        21CRF compliant.  # noqa: E501

        :param compliant: The compliant of this Experiment.  # noqa: E501
        :type: str
        """

        self._compliant = compliant

    @property
    def signers(self):
        """Gets the signers of this Experiment.  # noqa: E501

        The list of required signatures.  # noqa: E501

        :return: The signers of this Experiment.  # noqa: E501
        :rtype: list[str]
        """
        return self._signers

    @signers.setter
    def signers(self, signers):
        """Sets the signers of this Experiment.

        The list of required signatures.  # noqa: E501

        :param signers: The signers of this Experiment.  # noqa: E501
        :type: list[str]
        """

        self._signers = signers

    @property
    def top_group(self):
        """Gets the top_group of this Experiment.  # noqa: E501


        :return: The top_group of this Experiment.  # noqa: E501
        :rtype: TopGroup
        """
        return self._top_group

    @top_group.setter
    def top_group(self, top_group):
        """Sets the top_group of this Experiment.


        :param top_group: The top_group of this Experiment.  # noqa: E501
        :type: TopGroup
        """

        self._top_group = top_group

    @property
    def permissions(self):
        """Gets the permissions of this Experiment.  # noqa: E501

        The permission level of the entity.  # noqa: E501

        :return: The permissions of this Experiment.  # noqa: E501
        :rtype: int
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Experiment.

        The permission level of the entity.  # noqa: E501

        :param permissions: The permissions of this Experiment.  # noqa: E501
        :type: int
        """

        self._permissions = permissions

    @property
    def creator(self):
        """Gets the creator of this Experiment.  # noqa: E501

        The username of the user that created this experiment.  # noqa: E501

        :return: The creator of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Experiment.

        The username of the user that created this experiment.  # noqa: E501

        :param creator: The creator of this Experiment.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def created(self):
        """Gets the created of this Experiment.  # noqa: E501


        :return: The created of this Experiment.  # noqa: E501
        :rtype: Created
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Experiment.


        :param created: The created of this Experiment.  # noqa: E501
        :type: Created
        """

        self._created = created

    @property
    def org(self):
        """Gets the org of this Experiment.  # noqa: E501


        :return: The org of this Experiment.  # noqa: E501
        :rtype: Org
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Experiment.


        :param org: The org of this Experiment.  # noqa: E501
        :type: Org
        """

        self._org = org

    @property
    def linked_to(self):
        """Gets the linked_to of this Experiment.  # noqa: E501


        :return: The linked_to of this Experiment.  # noqa: E501
        :rtype: list[str]
        """
        return self._linked_to

    @linked_to.setter
    def linked_to(self, linked_to):
        """Sets the linked_to of this Experiment.


        :param linked_to: The linked_to of this Experiment.  # noqa: E501
        :type: list[str]
        """

        self._linked_to = linked_to

    @property
    def activity_order(self):
        """Gets the activity_order of this Experiment.  # noqa: E501

        An array of activity/step IDs as ordered in the `getProcess` endpoint.  # noqa: E501

        :return: The activity_order of this Experiment.  # noqa: E501
        :rtype: list[str]
        """
        return self._activity_order

    @activity_order.setter
    def activity_order(self, activity_order):
        """Sets the activity_order of this Experiment.

        An array of activity/step IDs as ordered in the `getProcess` endpoint.  # noqa: E501

        :param activity_order: The activity_order of this Experiment.  # noqa: E501
        :type: list[str]
        """

        self._activity_order = activity_order

    @property
    def description(self):
        """Gets the description of this Experiment.  # noqa: E501


        :return: The description of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Experiment.


        :param description: The description of this Experiment.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Experiment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Experiment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

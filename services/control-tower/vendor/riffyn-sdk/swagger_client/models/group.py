# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'top_level': 'bool',
        'description': 'str',
        'connections': 'list[ConnectionLine]',
        'entities': 'list[GroupEntities]',
        'top_group_id': 'str',
        'shareable': 'bool',
        'accessible_to': 'AccessibleTo',
        'public': 'Public',
        'activity_order': 'list[str]',
        'instruction_exceptions': 'list[str]',
        'status': 'str',
        'compliant': 'bool',
        'signers': 'list[str]',
        'req_signatures': 'int',
        'locked': 'bool',
        'permissions': 'Permissions',
        'modified_by': 'ModifiedBy',
        'creator': 'Creator',
        'created': 'Created',
        'org': 'Org',
        'modified': 'Modified',
        'version': 'Version',
        'object_id': 'str',
        'parent': 'GroupParent'
    }

    attribute_map = {
        'id': '_id',
        'name': 'name',
        'top_level': 'topLevel',
        'description': 'description',
        'connections': 'connections',
        'entities': 'entities',
        'top_group_id': 'topGroupId',
        'shareable': 'shareable',
        'accessible_to': 'accessibleTo',
        'public': 'public',
        'activity_order': 'activityOrder',
        'instruction_exceptions': 'instructionExceptions',
        'status': 'status',
        'compliant': 'compliant',
        'signers': 'signers',
        'req_signatures': 'reqSignatures',
        'locked': 'locked',
        'permissions': 'permissions',
        'modified_by': 'modifiedBy',
        'creator': 'creator',
        'created': 'created',
        'org': 'org',
        'modified': 'modified',
        'version': 'version',
        'object_id': 'objectId',
        'parent': 'parent'
    }

    def __init__(self, id=None, name=None, top_level=None, description=None, connections=None, entities=None, top_group_id=None, shareable=None, accessible_to=None, public=None, activity_order=None, instruction_exceptions=None, status=None, compliant=None, signers=None, req_signatures=None, locked=None, permissions=None, modified_by=None, creator=None, created=None, org=None, modified=None, version=None, object_id=None, parent=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._top_level = None
        self._description = None
        self._connections = None
        self._entities = None
        self._top_group_id = None
        self._shareable = None
        self._accessible_to = None
        self._public = None
        self._activity_order = None
        self._instruction_exceptions = None
        self._status = None
        self._compliant = None
        self._signers = None
        self._req_signatures = None
        self._locked = None
        self._permissions = None
        self._modified_by = None
        self._creator = None
        self._created = None
        self._org = None
        self._modified = None
        self._version = None
        self._object_id = None
        self._parent = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if top_level is not None:
            self.top_level = top_level
        if description is not None:
            self.description = description
        if connections is not None:
            self.connections = connections
        if entities is not None:
            self.entities = entities
        if top_group_id is not None:
            self.top_group_id = top_group_id
        if shareable is not None:
            self.shareable = shareable
        if accessible_to is not None:
            self.accessible_to = accessible_to
        if public is not None:
            self.public = public
        if activity_order is not None:
            self.activity_order = activity_order
        if instruction_exceptions is not None:
            self.instruction_exceptions = instruction_exceptions
        if status is not None:
            self.status = status
        if compliant is not None:
            self.compliant = compliant
        if signers is not None:
            self.signers = signers
        if req_signatures is not None:
            self.req_signatures = req_signatures
        if locked is not None:
            self.locked = locked
        if permissions is not None:
            self.permissions = permissions
        if modified_by is not None:
            self.modified_by = modified_by
        if creator is not None:
            self.creator = creator
        if created is not None:
            self.created = created
        if org is not None:
            self.org = org
        if modified is not None:
            self.modified = modified
        if version is not None:
            self.version = version
        if object_id is not None:
            self.object_id = object_id
        if parent is not None:
            self.parent = parent

    @property
    def id(self):
        """Gets the id of this Group.  # noqa: E501

        The unique id of the process (group)  # noqa: E501

        :return: The id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        The unique id of the process (group)  # noqa: E501

        :param id: The id of this Group.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Group.  # noqa: E501

        The name of the item  # noqa: E501

        :return: The name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        The name of the item  # noqa: E501

        :param name: The name of this Group.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def top_level(self):
        """Gets the top_level of this Group.  # noqa: E501

        Indicates whether the group is a process or a subgroup of a process.  # noqa: E501

        :return: The top_level of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._top_level

    @top_level.setter
    def top_level(self, top_level):
        """Sets the top_level of this Group.

        Indicates whether the group is a process or a subgroup of a process.  # noqa: E501

        :param top_level: The top_level of this Group.  # noqa: E501
        :type: bool
        """

        self._top_level = top_level

    @property
    def description(self):
        """Gets the description of this Group.  # noqa: E501


        :return: The description of this Group.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Group.


        :param description: The description of this Group.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def connections(self):
        """Gets the connections of this Group.  # noqa: E501


        :return: The connections of this Group.  # noqa: E501
        :rtype: list[ConnectionLine]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this Group.


        :param connections: The connections of this Group.  # noqa: E501
        :type: list[ConnectionLine]
        """

        self._connections = connections

    @property
    def entities(self):
        """Gets the entities of this Group.  # noqa: E501


        :return: The entities of this Group.  # noqa: E501
        :rtype: list[GroupEntities]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this Group.


        :param entities: The entities of this Group.  # noqa: E501
        :type: list[GroupEntities]
        """

        self._entities = entities

    @property
    def top_group_id(self):
        """Gets the top_group_id of this Group.  # noqa: E501

        The process this group belongs to.  # noqa: E501

        :return: The top_group_id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._top_group_id

    @top_group_id.setter
    def top_group_id(self, top_group_id):
        """Sets the top_group_id of this Group.

        The process this group belongs to.  # noqa: E501

        :param top_group_id: The top_group_id of this Group.  # noqa: E501
        :type: str
        """

        self._top_group_id = top_group_id

    @property
    def shareable(self):
        """Gets the shareable of this Group.  # noqa: E501

        Indicates if the process can be shared with other users  # noqa: E501

        :return: The shareable of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._shareable

    @shareable.setter
    def shareable(self, shareable):
        """Sets the shareable of this Group.

        Indicates if the process can be shared with other users  # noqa: E501

        :param shareable: The shareable of this Group.  # noqa: E501
        :type: bool
        """

        self._shareable = shareable

    @property
    def accessible_to(self):
        """Gets the accessible_to of this Group.  # noqa: E501


        :return: The accessible_to of this Group.  # noqa: E501
        :rtype: AccessibleTo
        """
        return self._accessible_to

    @accessible_to.setter
    def accessible_to(self, accessible_to):
        """Sets the accessible_to of this Group.


        :param accessible_to: The accessible_to of this Group.  # noqa: E501
        :type: AccessibleTo
        """

        self._accessible_to = accessible_to

    @property
    def public(self):
        """Gets the public of this Group.  # noqa: E501


        :return: The public of this Group.  # noqa: E501
        :rtype: Public
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Group.


        :param public: The public of this Group.  # noqa: E501
        :type: Public
        """

        self._public = public

    @property
    def activity_order(self):
        """Gets the activity_order of this Group.  # noqa: E501

        An array of activity/step IDs as ordered in the `getProcess` endpoint.  # noqa: E501

        :return: The activity_order of this Group.  # noqa: E501
        :rtype: list[str]
        """
        return self._activity_order

    @activity_order.setter
    def activity_order(self, activity_order):
        """Sets the activity_order of this Group.

        An array of activity/step IDs as ordered in the `getProcess` endpoint.  # noqa: E501

        :param activity_order: The activity_order of this Group.  # noqa: E501
        :type: list[str]
        """

        self._activity_order = activity_order

    @property
    def instruction_exceptions(self):
        """Gets the instruction_exceptions of this Group.  # noqa: E501

        Exceptions to the order of instructions.  # noqa: E501

        :return: The instruction_exceptions of this Group.  # noqa: E501
        :rtype: list[str]
        """
        return self._instruction_exceptions

    @instruction_exceptions.setter
    def instruction_exceptions(self, instruction_exceptions):
        """Sets the instruction_exceptions of this Group.

        Exceptions to the order of instructions.  # noqa: E501

        :param instruction_exceptions: The instruction_exceptions of this Group.  # noqa: E501
        :type: list[str]
        """

        self._instruction_exceptions = instruction_exceptions

    @property
    def status(self):
        """Gets the status of this Group.  # noqa: E501


        :return: The status of this Group.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Group.


        :param status: The status of this Group.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def compliant(self):
        """Gets the compliant of this Group.  # noqa: E501

        21CRF compliant.  # noqa: E501

        :return: The compliant of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._compliant

    @compliant.setter
    def compliant(self, compliant):
        """Sets the compliant of this Group.

        21CRF compliant.  # noqa: E501

        :param compliant: The compliant of this Group.  # noqa: E501
        :type: bool
        """

        self._compliant = compliant

    @property
    def signers(self):
        """Gets the signers of this Group.  # noqa: E501


        :return: The signers of this Group.  # noqa: E501
        :rtype: list[str]
        """
        return self._signers

    @signers.setter
    def signers(self, signers):
        """Sets the signers of this Group.


        :param signers: The signers of this Group.  # noqa: E501
        :type: list[str]
        """

        self._signers = signers

    @property
    def req_signatures(self):
        """Gets the req_signatures of this Group.  # noqa: E501

        The number of signatures required for approval.  # noqa: E501

        :return: The req_signatures of this Group.  # noqa: E501
        :rtype: int
        """
        return self._req_signatures

    @req_signatures.setter
    def req_signatures(self, req_signatures):
        """Sets the req_signatures of this Group.

        The number of signatures required for approval.  # noqa: E501

        :param req_signatures: The req_signatures of this Group.  # noqa: E501
        :type: int
        """

        self._req_signatures = req_signatures

    @property
    def locked(self):
        """Gets the locked of this Group.  # noqa: E501

        If true, edits are disabled pending approval of signatures.  # noqa: E501

        :return: The locked of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Group.

        If true, edits are disabled pending approval of signatures.  # noqa: E501

        :param locked: The locked of this Group.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def permissions(self):
        """Gets the permissions of this Group.  # noqa: E501


        :return: The permissions of this Group.  # noqa: E501
        :rtype: Permissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Group.


        :param permissions: The permissions of this Group.  # noqa: E501
        :type: Permissions
        """

        self._permissions = permissions

    @property
    def modified_by(self):
        """Gets the modified_by of this Group.  # noqa: E501


        :return: The modified_by of this Group.  # noqa: E501
        :rtype: ModifiedBy
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Group.


        :param modified_by: The modified_by of this Group.  # noqa: E501
        :type: ModifiedBy
        """

        self._modified_by = modified_by

    @property
    def creator(self):
        """Gets the creator of this Group.  # noqa: E501


        :return: The creator of this Group.  # noqa: E501
        :rtype: Creator
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Group.


        :param creator: The creator of this Group.  # noqa: E501
        :type: Creator
        """

        self._creator = creator

    @property
    def created(self):
        """Gets the created of this Group.  # noqa: E501


        :return: The created of this Group.  # noqa: E501
        :rtype: Created
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Group.


        :param created: The created of this Group.  # noqa: E501
        :type: Created
        """

        self._created = created

    @property
    def org(self):
        """Gets the org of this Group.  # noqa: E501


        :return: The org of this Group.  # noqa: E501
        :rtype: Org
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Group.


        :param org: The org of this Group.  # noqa: E501
        :type: Org
        """

        self._org = org

    @property
    def modified(self):
        """Gets the modified of this Group.  # noqa: E501


        :return: The modified of this Group.  # noqa: E501
        :rtype: Modified
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Group.


        :param modified: The modified of this Group.  # noqa: E501
        :type: Modified
        """

        self._modified = modified

    @property
    def version(self):
        """Gets the version of this Group.  # noqa: E501


        :return: The version of this Group.  # noqa: E501
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Group.


        :param version: The version of this Group.  # noqa: E501
        :type: Version
        """

        self._version = version

    @property
    def object_id(self):
        """Gets the object_id of this Group.  # noqa: E501


        :return: The object_id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Group.


        :param object_id: The object_id of this Group.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def parent(self):
        """Gets the parent of this Group.  # noqa: E501


        :return: The parent of this Group.  # noqa: E501
        :rtype: GroupParent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Group.


        :param parent: The parent of this Group.  # noqa: E501
        :type: GroupParent
        """

        self._parent = parent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

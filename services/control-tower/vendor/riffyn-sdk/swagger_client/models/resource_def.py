# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ResourceDef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'properties': 'list[PropertyDef]',
        'components': 'list[Component]',
        'sample': 'bool',
        'direction': 'str',
        'name': 'str',
        'adhoc': 'bool',
        'key': 'str',
        'type_id': 'str',
        'type_name': 'str'
    }

    attribute_map = {
        'id': '_id',
        'properties': 'properties',
        'components': 'components',
        'sample': 'sample',
        'direction': 'direction',
        'name': 'name',
        'adhoc': 'adhoc',
        'key': 'key',
        'type_id': 'typeId',
        'type_name': 'typeName'
    }

    def __init__(self, id=None, properties=None, components=None, sample=None, direction=None, name=None, adhoc=None, key=None, type_id=None, type_name=None):  # noqa: E501
        """ResourceDef - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._properties = None
        self._components = None
        self._sample = None
        self._direction = None
        self._name = None
        self._adhoc = None
        self._key = None
        self._type_id = None
        self._type_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if properties is not None:
            self.properties = properties
        if components is not None:
            self.components = components
        if sample is not None:
            self.sample = sample
        if direction is not None:
            self.direction = direction
        if name is not None:
            self.name = name
        if adhoc is not None:
            self.adhoc = adhoc
        if key is not None:
            self.key = key
        if type_id is not None:
            self.type_id = type_id
        if type_name is not None:
            self.type_name = type_name

    @property
    def id(self):
        """Gets the id of this ResourceDef.  # noqa: E501

        A unique key that's generated for each `input` or `output` of an activity. This value is referenced as `resourceDefId` in other data sets  # noqa: E501

        :return: The id of this ResourceDef.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceDef.

        A unique key that's generated for each `input` or `output` of an activity. This value is referenced as `resourceDefId` in other data sets  # noqa: E501

        :param id: The id of this ResourceDef.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def properties(self):
        """Gets the properties of this ResourceDef.  # noqa: E501


        :return: The properties of this ResourceDef.  # noqa: E501
        :rtype: list[PropertyDef]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ResourceDef.


        :param properties: The properties of this ResourceDef.  # noqa: E501
        :type: list[PropertyDef]
        """

        self._properties = properties

    @property
    def components(self):
        """Gets the components of this ResourceDef.  # noqa: E501


        :return: The components of this ResourceDef.  # noqa: E501
        :rtype: list[Component]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this ResourceDef.


        :param components: The components of this ResourceDef.  # noqa: E501
        :type: list[Component]
        """

        self._components = components

    @property
    def sample(self):
        """Gets the sample of this ResourceDef.  # noqa: E501


        :return: The sample of this ResourceDef.  # noqa: E501
        :rtype: bool
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this ResourceDef.


        :param sample: The sample of this ResourceDef.  # noqa: E501
        :type: bool
        """

        self._sample = sample

    @property
    def direction(self):
        """Gets the direction of this ResourceDef.  # noqa: E501

        Allowed values are `input` and `output`.  # noqa: E501

        :return: The direction of this ResourceDef.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ResourceDef.

        Allowed values are `input` and `output`.  # noqa: E501

        :param direction: The direction of this ResourceDef.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def name(self):
        """Gets the name of this ResourceDef.  # noqa: E501

        The `name` of the resource type associated with this resource definition.  # noqa: E501

        :return: The name of this ResourceDef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceDef.

        The `name` of the resource type associated with this resource definition.  # noqa: E501

        :param name: The name of this ResourceDef.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def adhoc(self):
        """Gets the adhoc of this ResourceDef.  # noqa: E501

        If `true`, this resource is custom to the experiment and does not exist at the process level.  # noqa: E501

        :return: The adhoc of this ResourceDef.  # noqa: E501
        :rtype: bool
        """
        return self._adhoc

    @adhoc.setter
    def adhoc(self, adhoc):
        """Sets the adhoc of this ResourceDef.

        If `true`, this resource is custom to the experiment and does not exist at the process level.  # noqa: E501

        :param adhoc: The adhoc of this ResourceDef.  # noqa: E501
        :type: bool
        """

        self._adhoc = adhoc

    @property
    def key(self):
        """Gets the key of this ResourceDef.  # noqa: E501

        A string value that uniquely identifies this resource in the `adhocItems` list.  # noqa: E501

        :return: The key of this ResourceDef.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ResourceDef.

        A string value that uniquely identifies this resource in the `adhocItems` list.  # noqa: E501

        :param key: The key of this ResourceDef.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def type_id(self):
        """Gets the type_id of this ResourceDef.  # noqa: E501

        The `_id` of the resource type associated with this resource definition.  # noqa: E501

        :return: The type_id of this ResourceDef.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this ResourceDef.

        The `_id` of the resource type associated with this resource definition.  # noqa: E501

        :param type_id: The type_id of this ResourceDef.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    @property
    def type_name(self):
        """Gets the type_name of this ResourceDef.  # noqa: E501

        The `name` of the resource type associated with this resource definition.  # noqa: E501

        :return: The type_name of this ResourceDef.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this ResourceDef.

        The `name` of the resource type associated with this resource definition.  # noqa: E501

        :param type_name: The type_name of this ResourceDef.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceDef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceDef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

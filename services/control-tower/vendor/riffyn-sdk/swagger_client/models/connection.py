# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Connection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_id': 'str',
        'from_type': 'str',
        'from_res_def_id': 'str',
        'to_id': 'str',
        'to_type': 'str',
        'to_res_def_id': 'str'
    }

    attribute_map = {
        'from_id': 'fromId',
        'from_type': 'fromType',
        'from_res_def_id': 'fromResDefId',
        'to_id': 'toId',
        'to_type': 'toType',
        'to_res_def_id': 'toResDefId'
    }

    def __init__(self, from_id=None, from_type=None, from_res_def_id=None, to_id=None, to_type=None, to_res_def_id=None):  # noqa: E501
        """Connection - a model defined in Swagger"""  # noqa: E501
        self._from_id = None
        self._from_type = None
        self._from_res_def_id = None
        self._to_id = None
        self._to_type = None
        self._to_res_def_id = None
        self.discriminator = None
        self.from_id = from_id
        self.from_type = from_type
        self.from_res_def_id = from_res_def_id
        self.to_id = to_id
        self.to_type = to_type
        self.to_res_def_id = to_res_def_id

    @property
    def from_id(self):
        """Gets the from_id of this Connection.  # noqa: E501

        The `_id` of the activity or group where the connection originates from.  # noqa: E501

        :return: The from_id of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._from_id

    @from_id.setter
    def from_id(self, from_id):
        """Sets the from_id of this Connection.

        The `_id` of the activity or group where the connection originates from.  # noqa: E501

        :param from_id: The from_id of this Connection.  # noqa: E501
        :type: str
        """
        if from_id is None:
            raise ValueError("Invalid value for `from_id`, must not be `None`")  # noqa: E501

        self._from_id = from_id

    @property
    def from_type(self):
        """Gets the from_type of this Connection.  # noqa: E501

        The `type` is either `activity` or `group` for the entity being connected.  # noqa: E501

        :return: The from_type of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._from_type

    @from_type.setter
    def from_type(self, from_type):
        """Sets the from_type of this Connection.

        The `type` is either `activity` or `group` for the entity being connected.  # noqa: E501

        :param from_type: The from_type of this Connection.  # noqa: E501
        :type: str
        """
        if from_type is None:
            raise ValueError("Invalid value for `from_type`, must not be `None`")  # noqa: E501

        self._from_type = from_type

    @property
    def from_res_def_id(self):
        """Gets the from_res_def_id of this Connection.  # noqa: E501

        A `from` resourceDefId is the `_id` of one of the `outputs` of the process activity (step) that identifies the resource type being connected. The resourceDefId for a group must first be exported from the activity where the resource exists.  # noqa: E501

        :return: The from_res_def_id of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._from_res_def_id

    @from_res_def_id.setter
    def from_res_def_id(self, from_res_def_id):
        """Sets the from_res_def_id of this Connection.

        A `from` resourceDefId is the `_id` of one of the `outputs` of the process activity (step) that identifies the resource type being connected. The resourceDefId for a group must first be exported from the activity where the resource exists.  # noqa: E501

        :param from_res_def_id: The from_res_def_id of this Connection.  # noqa: E501
        :type: str
        """
        if from_res_def_id is None:
            raise ValueError("Invalid value for `from_res_def_id`, must not be `None`")  # noqa: E501

        self._from_res_def_id = from_res_def_id

    @property
    def to_id(self):
        """Gets the to_id of this Connection.  # noqa: E501

        The `_id` of the activity or group where the connection is directed to.  # noqa: E501

        :return: The to_id of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._to_id

    @to_id.setter
    def to_id(self, to_id):
        """Sets the to_id of this Connection.

        The `_id` of the activity or group where the connection is directed to.  # noqa: E501

        :param to_id: The to_id of this Connection.  # noqa: E501
        :type: str
        """
        if to_id is None:
            raise ValueError("Invalid value for `to_id`, must not be `None`")  # noqa: E501

        self._to_id = to_id

    @property
    def to_type(self):
        """Gets the to_type of this Connection.  # noqa: E501

        The `type` is either `activity` or `group` for the entity being connected.  # noqa: E501

        :return: The to_type of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._to_type

    @to_type.setter
    def to_type(self, to_type):
        """Sets the to_type of this Connection.

        The `type` is either `activity` or `group` for the entity being connected.  # noqa: E501

        :param to_type: The to_type of this Connection.  # noqa: E501
        :type: str
        """
        if to_type is None:
            raise ValueError("Invalid value for `to_type`, must not be `None`")  # noqa: E501

        self._to_type = to_type

    @property
    def to_res_def_id(self):
        """Gets the to_res_def_id of this Connection.  # noqa: E501

        A `to` resourceDefId is the _id of one of the `inputs` of the process activity (step) that identifies the resource type being connected. The resourceDefId for a group must first be imported from the inner activity where the resource exists.   # noqa: E501

        :return: The to_res_def_id of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._to_res_def_id

    @to_res_def_id.setter
    def to_res_def_id(self, to_res_def_id):
        """Sets the to_res_def_id of this Connection.

        A `to` resourceDefId is the _id of one of the `inputs` of the process activity (step) that identifies the resource type being connected. The resourceDefId for a group must first be imported from the inner activity where the resource exists.   # noqa: E501

        :param to_res_def_id: The to_res_def_id of this Connection.  # noqa: E501
        :type: str
        """
        if to_res_def_id is None:
            raise ValueError("Invalid value for `to_res_def_id`, must not be `None`")  # noqa: E501

        self._to_res_def_id = to_res_def_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Connection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Connection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

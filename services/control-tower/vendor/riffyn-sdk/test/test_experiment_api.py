# coding: utf-8

"""
    Riffyn REST API

    ### Vocabulary Before you begin, please familiarize yourself with our [Glossary of Terms](https://help.riffyn.com/hc/en-us/articles/360045503694). ### Getting Started If you'd like to play around with the API, there are several free GUI tools that will allow you to send requests and receive responses. We suggest using the free app [Postman](https://www.getpostman.com/). ### Authentication Begin with a call the [authenticate](/#api-Authentication-authenticate) endpoint using [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) with your `username` and `password` to retrieve either an API Key or an Access Token. For example:      curl -X POST -u '<username>' https://api.app.riffyn.com/v1/auth -v  You may then use either the API Key or the accessToken for all future requests to the API. For example:      curl -H 'access-token: <ACCESS_TOKEN>' https://api.app.riffyn.com/v1/units -v      curl -H 'api-key: <API_KEY>' https://api.app.riffyn.com/v1/units -v  The tokens' values will be either in the message returned by the `/authenticate` endpoint or in the createApiKey `/auth/api-key` or CreateAccesToken `/auth/access-token` endpoints. The API Key will remain valid until it is deauthorized by revoking it through the Security Settings in the Riffyn App UI. The API Key is best for running scripts and longer lasting interactions with the API. The Access Token will expire automatically and is best suited to granting applications short term access to the Riffyn API. Make your requests by sending the HTTP header `api-key: $API_KEY`, or `access-token: $ACCESS_TOKEN`. In Postman, add your prefered token to the headers under the Headers tab for any request other than the original request to `/authenticate`.  If you are enrolled in MultiFactor Authentication (MFA) the `status` returned by the `/authenticate` endpoint will be `MFA_REQUIRED`. A `passCode`, a `stateToken`, and a `factorId` must be passed to the [/verify](/#api-Authentication-verify) endpoint to complete the authentication process and achieve the `SUCCESS` status. MFA must be managed in the Riffyn App UI.  ### Paging and Sorting The majority of endpoints that return a list of data support paging and sorting through the use of three properties, `limit`,  `offset`, and `sort`. Please see the list of query parameters, displayed below each endpoint's code examples, to see if paging or sorting is supported for that specific endpoint.  Certain endpoints return data that's added frequently, like resources. As a result, you may want filter results on either the maximum or minimum creation timestamp. This will prevent rows from shifting their position from the top of the list, as you scroll though subsequent pages of a multi-page response.  Before querying for the first page, store the current date-time (in memory, a database, a file...). On subsequent pages you *may* include the `before` query parameter, to limit the results to records created before that date-time. E.g. before loading page one, you store the current date time of `2016-10-31T22:00:00Z` (ISO date format). Later, when generating the URL for page two, you *could* limit the results by including the query parameter `before=1477951200000` (epoch timestamp).  ### Postman endpoint examples There is a YAML file with the examples of the request on Riffyn API [Click here](/collection) to get the file. If you don't know how to import the collection file, [here](https://learning.postman.com/docs/postman/collections/data-formats/#importing-postman-data) are the steps. ### Client SDKs You may write your own API client, or you may use one of ours. [Click here](/clients) to select your programming language and download an API client.   # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: support@riffyn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from api.experiment_api import ExperimentApi  # noqa: E501
from swagger_client.rest import ApiException


class TestExperimentApi(unittest.TestCase):
    """ExperimentApi unit test stubs"""

    def setUp(self):
        self.api = api.experiment_api.ExperimentApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_comment_to_experiment(self):
        """Test case for add_comment_to_experiment

        """
        pass

    def test_add_component_to_resource_type(self):
        """Test case for add_component_to_resource_type

        """
        pass

    def test_add_property_type_to_experiment(self):
        """Test case for add_property_type_to_experiment

        """
        pass

    def test_add_resource_type_to_experiment(self):
        """Test case for add_resource_type_to_experiment

        """
        pass

    def test_add_summary_to_experiment(self):
        """Test case for add_summary_to_experiment

        """
        pass

    def test_add_tag_to_experiment(self):
        """Test case for add_tag_to_experiment

        """
        pass

    def test_apply_upload_config(self):
        """Test case for apply_upload_config

        """
        pass

    def test_apply_upload_config_collection(self):
        """Test case for apply_upload_config_collection

        """
        pass

    def test_clone_experiment(self):
        """Test case for clone_experiment

        """
        pass

    def test_create_experiment(self):
        """Test case for create_experiment

        """
        pass

    def test_delete_component_from_resource_type(self):
        """Test case for delete_component_from_resource_type

        """
        pass

    def test_delete_experiment(self):
        """Test case for delete_experiment

        """
        pass

    def test_delete_experiment_comment(self):
        """Test case for delete_experiment_comment

        """
        pass

    def test_delete_experiment_summary(self):
        """Test case for delete_experiment_summary

        """
        pass

    def test_delete_property_type_from_experiment(self):
        """Test case for delete_property_type_from_experiment

        """
        pass

    def test_delete_resource_type_from_experiment(self):
        """Test case for delete_resource_type_from_experiment

        """
        pass

    def test_delete_tag_from_experiment(self):
        """Test case for delete_tag_from_experiment

        """
        pass

    def test_export_experiment_data(self):
        """Test case for export_experiment_data

        """
        pass

    def test_export_experiment_data_status(self):
        """Test case for export_experiment_data_status

        """
        pass

    def test_get_experiment(self):
        """Test case for get_experiment

        """
        pass

    def test_get_experiment_comment(self):
        """Test case for get_experiment_comment

        """
        pass

    def test_get_experiment_data_clean(self):
        """Test case for get_experiment_data_clean

        """
        pass

    def test_get_experiment_data_raw(self):
        """Test case for get_experiment_data_raw

        """
        pass

    def test_get_experiment_summary(self):
        """Test case for get_experiment_summary

        """
        pass

    def test_get_role_for_experiment(self):
        """Test case for get_role_for_experiment

        """
        pass

    def test_list_experiment_activities(self):
        """Test case for list_experiment_activities

        """
        pass

    def test_list_experiment_comments(self):
        """Test case for list_experiment_comments

        """
        pass

    def test_list_experiment_tags(self):
        """Test case for list_experiment_tags

        """
        pass

    def test_list_experiments(self):
        """Test case for list_experiments

        """
        pass

    def test_list_replies_to_experiment_comment(self):
        """Test case for list_replies_to_experiment_comment

        """
        pass

    def test_reply_to_expriment_comment(self):
        """Test case for reply_to_expriment_comment

        """
        pass

    def test_share_experiment(self):
        """Test case for share_experiment

        """
        pass

    def test_unshare_experiment(self):
        """Test case for unshare_experiment

        """
        pass

    def test_update_experiment(self):
        """Test case for update_experiment

        """
        pass

    def test_update_experiment_comment(self):
        """Test case for update_experiment_comment

        """
        pass

    def test_update_experiment_summary(self):
        """Test case for update_experiment_summary

        """
        pass

    def test_update_property_type_on_experiment(self):
        """Test case for update_property_type_on_experiment

        """
        pass

    def test_update_resource_type_on_experiment(self):
        """Test case for update_resource_type_on_experiment

        """
        pass

    def test_upload_config_status(self):
        """Test case for upload_config_status

        """
        pass

    def test_upload_data_file(self):
        """Test case for upload_data_file

        """
        pass


if __name__ == '__main__':
    unittest.main()
